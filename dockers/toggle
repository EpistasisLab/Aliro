#!/bin/bash
#DPL 
basedir=`pwd`
NETWORK=pennai
# load variables from vars file
if [ "$1" == "shared" ] ; then
   echo "running shared environment"
   cmd='createshared';
elif [ "$1" == "resume" ] ; then
   echo "stop containers" 
elif [ "$1" == "stop" ] ; then
   echo "stop containers" 
elif [ "$1" == "push" ] ; then
   echo "push images to registry" 
   cmd='push';
else
   echo "running standalone environment"
   cmd='create'
fi;

#check to see if there's a running host for each directory
running_hosts=`docker ps --filter network=${NETWORK} --format "table {{.Names}}" | tail -n +2 | sort`
hosts=$(ls -d */ | tr -d \/)
num_running=`echo "$running_hosts" | wc -w`
num_hosts=`echo "$hosts" | wc -w`
if [ "$hosts" == "$running_hosts" ] ; then
    echo "up and running";
    docker_state=2;
else
    echo "$num_running of $num_hosts are running" ;
    docker_state=1;
fi;

if [ "$num_running" == 0 ]; then
    docker_state=0;
fi;

# create and start the containers
docker_init()
{
  docker_destroy;
  netstate=`docker network create ${NETWORK}`;
  for host in $hosts; do
    cd $basedir/$host && make  && make $cmd && docker start $host
  done
}
# destroy the containers
docker_destroy()
{
  for host in $hosts; do
    cd $basedir/$host && ./killall.sh 
  done
  netstate=`docker network rm ${NETWORK}`;
}
# resume the containers
docker_resume()
{
  for host in $hosts; do
    docker start $host
  done
}
# stop the containers
docker_stop()
{
  for host in $hosts; do
    docker stop $host
  done
}
# push the containers
docker_push()
{
  for host in $hosts; do
    cd $basedir/$host && make && make tag && make push
  done
}

if [ "$1" == "resume" ]; then
  echo "docker_resume";
  docker_resume;
elif [ "$1" == "push" ]; then
  docker_push;
elif [ "$1" == "stop" ]; then
  echo "docker_stop";
  docker_stop;
elif [ "$docker_state" == 0 ];then
  echo "docker_init";
  docker_init;
else
  echo "docker_destroy";
  docker_destroy;
fi;
