{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation template to create a new VPC or use an existing VPC for ECS deployment in Create Cluster Wizard. Requires exactly 1 Instance Types for a Spot Request.\n",
    "Parameters": {
        "EcsClusterName": {
            "Type": "String",
            "Description": "Specifies the ECS Cluster Name with which the resources would be associated\n",
            "Default": "default"
        },
        "EcsAmiId": {
            "Type": "String",
            "Description": "Specifies the AMI ID for your container instances."
        },
        "EcsInstanceType": {
            "Type": "CommaDelimitedList",
            "Description": "Specifies the EC2 instance type for your container instances. Defaults to m4.large\n",
            "Default": "m4.large",
            "ConstraintDescription": "must be a valid EC2 instance type."
        },
        "KeyName": {
            "Type": "String",
            "Description": "Optional - Specifies the name of an existing Amazon EC2 key pair to enable SSH access to the EC2 instances in your cluster.\n",
            "Default": ""
        },
        "VpcId": {
            "Type": "String",
            "Description": "Optional - Specifies the ID of an existing VPC in which to launch your container instances. If you specify a VPC ID, you must specify a list of existing subnets in that VPC. If you do not specify a VPC ID, a new VPC is created with atleast 1 subnet.\n",
            "Default": "",
            "AllowedPattern": "^(?:vpc-[0-9a-f]{8}|)$",
            "ConstraintDescription": "VPC Id must begin with 'vpc-' or leave blank to have a new VPC created\n"
        },
        "SubnetIds": {
            "Type": "CommaDelimitedList",
            "Description": "Optional - Specifies the Comma separated list of existing VPC Subnet Ids where ECS instances will run\n",
            "Default": ""
        },
        "SecurityGroupId": {
            "Type": "String",
            "Description": "Optional - Specifies the Security Group Id of an existing Security Group. Leave blank to have a new Security Group created\n",
            "Default": ""
        },
        "VpcCidr": {
            "Type": "String",
            "Description": "Optional - Specifies the CIDR Block of VPC",
            "Default": ""
        },
        "SubnetCidr1": {
            "Type": "String",
            "Description": "Specifies the CIDR Block of Subnet 1",
            "Default": ""
        },
        "SubnetCidr2": {
            "Type": "String",
            "Description": "Specifies the CIDR Block of Subnet 2",
            "Default": ""
        },
        "SubnetCidr3": {
            "Type": "String",
            "Description": "Specifies the CIDR Block of Subnet 3",
            "Default": ""
        },
        "AsgMaxSize": {
            "Type": "Number",
            "Description": "Specifies the number of instances to launch and register to the cluster. Defaults to 1.\n",
            "Default": "1"
        },
        "IamRoleInstanceProfile": {
            "Type": "String",
            "Description": "Specifies the Name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance\n"
        },
        "SecurityIngressFromPort": {
            "Type": "Number",
            "Description": "Optional - Specifies the Start of Security Group port to open on ECS instances - defaults to port 0\n",
            "Default": "0"
        },
        "SecurityIngressToPort": {
            "Type": "Number",
            "Description": "Optional - Specifies the End of Security Group port to open on ECS instances - defaults to port 65535\n",
            "Default": "65535"
        },
        "SecurityIngressCidrIp": {
            "Type": "String",
            "Description": "Optional - Specifies the CIDR/IP range for Security Ports - defaults to 0.0.0.0/0\n",
            "Default": "0.0.0.0/0"
        },
        "EcsEndpoint": {
            "Type": "String",
            "Description": "Optional - Specifies the ECS Endpoint for the ECS Agent to connect to\n",
            "Default": ""
        },
        "VpcAvailabilityZones": {
            "Type": "CommaDelimitedList",
            "Description": "Specifies a comma-separated list of 3 VPC Availability Zones for the creation of new subnets. These zones must have the available status.\n",
            "Default": ""
        },
        "EbsVolumeSize": {
            "Type": "Number",
            "Description": "Optional - Specifies the Size in GBs, of the newly created Amazon Elastic Block Store (Amazon EBS) volume\n",
            "Default": "0"
        },
        "EbsVolumeType": {
            "Type": "String",
            "Description": "Optional - Specifies the Type of (Amazon EBS) volume",
            "Default": "",
            "AllowedValues": [
                "",
                "standard",
                "io1",
                "gp2",
                "sc1",
                "st1"
            ],
            "ConstraintDescription": "Must be a valid EC2 volume type."
        },
        "DeviceName": {
            "Type": "String",
            "Description": "Optional - Specifies the device mapping for the Volume",
            "Default": ""
        },
        "UseSpot": {
            "Type": "String",
            "Default": "false"
        },
        "IamSpotFleetRoleName": {
            "Type": "String",
            "Default": ""
        },
        "SpotPrice": {
            "Type": "String",
            "Default": ""
        },
        "SpotAllocationStrategy": {
            "Type": "String",
            "Default": "diversified",
            "AllowedValues": [
                "lowestPrice",
                "diversified"
            ]
        }
    },
    "Conditions": {
        "CreateEC2LCWithKeyPair": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "KeyName"
                        },
                        ""
                    ]
                }
            ]
        },
        "SetEndpointToECSAgent": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "EcsEndpoint"
                        },
                        ""
                    ]
                }
            ]
        },
        "CreateNewSecurityGroup": {
            "Fn::Equals": [
                {
                    "Ref": "SecurityGroupId"
                },
                ""
            ]
        },
        "CreateNewVpc": {
            "Fn::Equals": [
                {
                    "Ref": "VpcId"
                },
                ""
            ]
        },
        "CreateSubnet1": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "SubnetCidr1"
                                },
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Condition": "CreateNewVpc"
                }
            ]
        },
        "CreateSubnet2": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "SubnetCidr2"
                                },
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Condition": "CreateSubnet1"
                }
            ]
        },
        "CreateSubnet3": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "SubnetCidr3"
                                },
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Condition": "CreateSubnet2"
                }
            ]
        },
        "CreateEbsVolume": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "EbsVolumeSize"
                                },
                                "0"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "EbsVolumeType"
                                },
                                ""
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "DeviceName"
                                },
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        "CreateWithSpot": {
            "Fn::Equals": [
                {
                    "Ref": "UseSpot"
                },
                "true"
            ]
        },
        "CreateWithASG": {
            "Fn::Not": [
                {
                    "Condition": "CreateWithSpot"
                }
            ]
        }
    },
    "Resources": {
        "Vpc": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCidr"
                },
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true"
            }
        },
        "PubSubnetAz1": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": {
                    "Ref": "SubnetCidr1"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "VpcAvailabilityZones"
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "PubSubnetAz2": {
            "Condition": "CreateSubnet2",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": {
                    "Ref": "SubnetCidr2"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "VpcAvailabilityZones"
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "PubSubnetAz3": {
            "Condition": "CreateSubnet3",
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "CidrBlock": {
                    "Ref": "SubnetCidr3"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        2,
                        {
                            "Ref": "VpcAvailabilityZones"
                        }
                    ]
                },
                "MapPublicIpOnLaunch": true
            }
        },
        "InternetGateway": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteViaIgw": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "Vpc"
                }
            }
        },
        "PublicRouteViaIgw": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PubSubnet1RouteTableAssociation": {
            "Condition": "CreateSubnet1",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnetAz1"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }
        },
        "PubSubnet2RouteTableAssociation": {
            "Condition": "CreateSubnet2",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnetAz2"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }
        },
        "PubSubnet3RouteTableAssociation": {
            "Condition": "CreateSubnet3",
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PubSubnetAz3"
                },
                "RouteTableId": {
                    "Ref": "RouteViaIgw"
                }
            }
        },
        "EcsSecurityGroup": {
            "Condition": "CreateNewSecurityGroup",
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "ECS Allowed Ports",
                "VpcId": {
                    "Fn::If": [
                        "CreateSubnet1",
                        {
                            "Ref": "Vpc"
                        },
                        {
                            "Ref": "VpcId"
                        }
                    ]
                },
                "SecurityGroupIngress": {
                    "IpProtocol": "tcp",
                    "FromPort": {
                        "Ref": "SecurityIngressFromPort"
                    },
                    "ToPort": {
                        "Ref": "SecurityIngressToPort"
                    },
                    "CidrIp": {
                        "Ref": "SecurityIngressCidrIp"
                    }
                }
            }
        },
        "EcsInstanceLc": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Condition": "CreateWithASG",
            "Properties": {
                "ImageId": {
                    "Ref": "EcsAmiId"
                },
                "InstanceType": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "EcsInstanceType"
                        }
                    ]
                },
                "AssociatePublicIpAddress": true,
                "IamInstanceProfile": {
                    "Ref": "IamRoleInstanceProfile"
                },
                "KeyName": {
                    "Fn::If": [
                        "CreateEC2LCWithKeyPair",
                        {
                            "Ref": "KeyName"
                        },
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "SecurityGroups": [
                    {
                        "Fn::If": [
                            "CreateNewSecurityGroup",
                            {
                                "Ref": "EcsSecurityGroup"
                            },
                            {
                                "Ref": "SecurityGroupId"
                            }
                        ]
                    }
                ],
                "BlockDeviceMappings": {
                    "Fn::If": [
                        "CreateEbsVolume",
                        [
                            {
                                "DeviceName": {
                                    "Ref": "DeviceName"
                                },
                                "Ebs": {
                                    "VolumeSize": {
                                        "Ref": "EbsVolumeSize"
                                    },
                                    "VolumeType": {
                                        "Ref": "EbsVolumeType"
                                    }
                                }
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "UserData": {
                    "Fn::If": [
                        "SetEndpointToECSAgent",
                        {
                            "Fn::Base64": {
                                "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config\necho ECS_BACKEND_HOST=${EcsEndpoint} >> /etc/ecs/ecs.config\n"
                            }
                        },
                        {
                            "Fn::Base64": {
                                "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config\n"
                            }
                        }
                    ]
                }
            }
        },
        "EcsInstanceAsg": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Condition": "CreateWithASG",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::If": [
                        "CreateSubnet1",
                        {
                            "Fn::If": [
                                "CreateSubnet2",
                                {
                                    "Fn::If": [
                                        "CreateSubnet3",
                                        [
                                            {
                                                "Fn::Sub": "${PubSubnetAz1}, ${PubSubnetAz2}, ${PubSubnetAz3}"
                                            }
                                        ],
                                        [
                                            {
                                                "Fn::Sub": "${PubSubnetAz1}, ${PubSubnetAz2}"
                                            }
                                        ]
                                    ]
                                },
                                [
                                    {
                                        "Fn::Sub": "${PubSubnetAz1}"
                                    }
                                ]
                            ]
                        },
                        {
                            "Ref": "SubnetIds"
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "EcsInstanceLc"
                },
                "MinSize": "0",
                "MaxSize": {
                    "Ref": "AsgMaxSize"
                },
                "DesiredCapacity": {
                    "Ref": "AsgMaxSize"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "ECS Instance - ${AWS::StackName}"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Description",
                        "Value": "This instance is the part of the Auto Scaling group which was created through ECS Console",
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "EcsSpotFleet": {
            "Condition": "CreateWithSpot",
            "Type": "AWS::EC2::SpotFleet",
            "Properties": {
                "SpotFleetRequestConfigData": {
                    "AllocationStrategy": {
                        "Ref": "SpotAllocationStrategy"
                    },
                    "IamFleetRole": {
                        "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/${IamSpotFleetRoleName}"
                    },
                    "TargetCapacity": {
                        "Ref": "AsgMaxSize"
                    },
                    "SpotPrice": {
                        "Ref": "SpotPrice"
                    },
                    "TerminateInstancesWithExpiration": true,
                    "LaunchSpecifications": [
                        {
                            "IamInstanceProfile": {
                                "Arn": {
                                    "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:instance-profile/${IamRoleInstanceProfile}"
                                }
                            },
                            "ImageId": {
                                "Ref": "EcsAmiId"
                            },
                            "InstanceType": {
                                "Fn::Select": [
                                    0,
                                    {
                                        "Ref": "EcsInstanceType"
                                    }
                                ]
                            },
                            "KeyName": {
                                "Fn::If": [
                                    "CreateEC2LCWithKeyPair",
                                    {
                                        "Ref": "KeyName"
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            "Monitoring": {
                                "Enabled": true
                            },
                            "SecurityGroups": [
                                {
                                    "GroupId": {
                                        "Fn::If": [
                                            "CreateNewSecurityGroup",
                                            {
                                                "Ref": "EcsSecurityGroup"
                                            },
                                            {
                                                "Ref": "SecurityGroupId"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "SubnetId": {
                                "Fn::If": [
                                    "CreateSubnet1",
                                    {
                                        "Fn::If": [
                                            "CreateSubnet2",
                                            {
                                                "Fn::If": [
                                                    "CreateSubnet3",
                                                    {
                                                        "Fn::Join": [
                                                            ",",
                                                            [
                                                                {
                                                                    "Ref": "PubSubnetAz1"
                                                                },
                                                                {
                                                                    "Ref": "PubSubnetAz2"
                                                                },
                                                                {
                                                                    "Ref": "PubSubnetAz3"
                                                                }
                                                            ]
                                                        ]
                                                    },
                                                    {
                                                        "Fn::Join": [
                                                            ",",
                                                            [
                                                                {
                                                                    "Ref": "PubSubnetAz1"
                                                                },
                                                                {
                                                                    "Ref": "PubSubnetAz2"
                                                                }
                                                            ]
                                                        ]
                                                    }
                                                ]
                                            },
                                            {
                                                "Ref": "PubSubnetAz1"
                                            }
                                        ]
                                    },
                                    {
                                        "Fn::Join": [
                                            ",",
                                            {
                                                "Ref": "SubnetIds"
                                            }
                                        ]
                                    }
                                ]
                            },
                            "BlockDeviceMappings": {
                                "Fn::If": [
                                    "CreateEbsVolume",
                                    [
                                        {
                                            "DeviceName": {
                                                "Ref": "DeviceName"
                                            },
                                            "Ebs": {
                                                "VolumeSize": {
                                                    "Ref": "EbsVolumeSize"
                                                },
                                                "VolumeType": {
                                                    "Ref": "EbsVolumeType"
                                                },
                                                "DeleteOnTermination": true
                                            }
                                        }
                                    ],
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            "UserData": {
                                "Fn::Base64": {
                                    "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${EcsClusterName} >> /etc/ecs/ecs.config\nif [ \"${EcsEndpoint}\" != \"\" ]; then\n  echo ECS_BACKEND_HOST=${EcsEndpoint} >> /etc/ecs/ecs.config\nfi\nexport PATH=/usr/local/bin:$PATH\nyum -y install jq\neasy_install pip\npip install awscli\naws configure set default.region ${AWS::Region}\ncat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf\ndescription \"Start spot instance termination handler monitoring script\"\nauthor \"Amazon Web Services\"\nstart on started ecs\nscript\necho \\$\\$ > /var/run/spot-instance-termination-notice-handler.pid\nexec /usr/local/bin/spot-instance-termination-notice-handler.sh\nend script\npre-start script\nlogger \"[spot-instance-termination-notice-handler.sh]: spot instance termination\nnotice handler started\"\nend script\nEOF\ncat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh\n#!/bin/bash\nwhile sleep 5; do\nif [ -z \\$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)]; then\n/bin/false\nelse\nlogger \"[spot-instance-termination-notice-handler.sh]: spot instance termination notice detected\"\nSTATUS=DRAINING\nECS_CLUSTER=\\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr -d \\\")\nCONTAINER_INSTANCE=\\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn | tr -d \\\")\nlogger \"[spot-instance-termination-notice-handler.sh]: putting instance in state \\$STATUS\"\n\nif [ \"${EcsEndpoint}\" != \"\" ]; then\n    /usr/local/bin/aws --endpoint-url https://${EcsEndpoint} ecs update-container-instances-state --cluster \\$ECS_CLUSTER --container-instances \\$CONTAINER_INSTANCE --status \\$STATUS\nelse\n    /usr/local/bin/aws ecs update-container-instances-state --cluster \\$ECS_CLUSTER --container-instances \\$CONTAINER_INSTANCE --status \\$STATUS\nfi\n\nlogger \"[spot-instance-termination-notice-handler.sh]: putting myself to sleep...\"\nsleep 120 # exit loop as instance expires in 120 secs after terminating notification\nfi\ndone\nEOF\nchmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh\n"
                                }
                            }
                        }
                    ]
                }
            }
        }
    },
    "Outputs": {
        "EcsInstanceAsgName": {
            "Condition": "CreateWithASG",
            "Description": "Auto Scaling Group Name for ECS Instances",
            "Value": {
                "Ref": "EcsInstanceAsg"
            }
        },
        "EcsSpotFleetRequestId": {
            "Condition": "CreateWithSpot",
            "Description": "Spot Fleet Request for ECS Instances",
            "Value": {
                "Ref": "EcsSpotFleet"
            }
        },
        "UsedByECSCreateCluster": {
            "Description": "Flag used by ECS Create Cluster Wizard",
            "Value": "true"
        },
        "TemplateVersion": {
            "Description": "The version of the template used by Create Cluster Wizard",
            "Value": "1.0.0"
        }
    }
}
