#%RAML 1.0
---
title: FGLab API
baseUri: http://fglab.com/api/{version}
version: v1
mediaType: application/json
/projects:
  get:
    description: Retrieve all projects
    responses:
      200:
        body:
          example: |
            [
              {
                "_id": "562237f33774694c5a4814bb",
                "name":"calinski-harabasz",
                "schema": {
                  "algorithm": {
                    "type": "enum",
                    "default": "kmeans",
                    "values": ["kmeans", "linkage", "gmdistribution"]
                  },
                  "k": {
                    "type": "int",
                    "default": 3
                  }
                }
              },
              {
                "_id": "56297e87d1a19b9c0e21c70a",
                "name":"bayesian-optimisation",
                "schema": {
                  "x": {
                    "type": "float",
                    "default": 2
                  },
                  "y": {
                    "type": "float",
                    "default": 7
                  }
                }
              }
            ]
  /{projectId}:
    get:
      description: Retrieve a specific project by ID
      responses:
        200:
          body:
            example: |
              {
                "_id": "56297e87d1a19b9c0e21c70a",
                "name":"bayesian-optimisation",
                "schema": {
                  "x": {
                    "type": "float",
                    "default": 2
                  },
                  "y": {
                    "type": "float",
                    "default": 7
                  }
                }
              }
    /experiment:
      post:
        description: Submit a single experiment
        responses:
          201:
            body:
              example: |
                {
                  "_id": "562a12bd612a17b20f99a143"
                }
          400:
            body:
              example: |
                {
                  "error": "Project ID 562237f33774694c5a4814bb does not exist"
                }
          500:
            body:
              example: |
                {
                  "error": "Experiment failed to run"
                }
          501:
            body:
              example: |
                {
                  "error": "No machine capacity available"
                }
    /batch:
      post:
        description: Submit a batch of experiments
        queryParameters:
          retry:
            displayName: Retry Timeout
            description: Time (s) between retries after single failed experiment submission
            type: integer
            minimum: 1
            default: 3600
            example: 60
        responses:
          201:
            body:
              example: |
                {
                  "status": "Started"
                }
          400:
            body:
              example: |
                {
                  "error": "Project ID 562237f33774694c5a4814bb does not exist"
                }
/experiments:
  get:
    description: Retrieve all experiments
    responses:
      200:
        body:
          example: |
            [
              {
                "_id": "562aa755023155351a2ff061",
                "_options": {
                  "y": 8.59954833984375,
                  "x": 0.07110595703125
                },
                "_project_id": "56297e87d1a19b9c0e21c70a",
                "_machine_id": "5628fb1b17de50be077be348",
                "_files": [],
                "_status": "success",
                "_started": "2015-10-23T21:32:05.995Z",
                "_finished": "2015-10-23T21:32:31.107Z",
                "_scores": {
                  "value": 97.4392476647487
                }
              },
              {
                "_id": "562aa731023155351a2ff060",
                "_options": {
                  "y": 15,
                  "x": -5
                },
                "_project_id": "56297e87d1a19b9c0e21c70a",
                "_machine_id": "5628fb1b17de50be077be348",
                "_files": [],
                "_status": "success",
                "_started": "2015-10-23T21:31:29.322Z",
                "_finished": "2015-10-23T21:31:58.435Z",
                "_scores": {
                  "value" :12.87494045337280
                }
              }
            ]
  /{experimentId}:
    get:
      description: Retrieve a specific experiment by ID
      responses:
        200:
          body:
            example: |
              {
                "_id": "562aa731023155351a2ff060",
                "_options": {
                  "y": 15,
                  "x": -5
                },
                "_project_id": "56297e87d1a19b9c0e21c70a",
                "_machine_id": "5628fb1b17de50be077be348",
                "_files": [],
                "_status": "success",
                "_started": "2015-10-23T21:31:29.322Z",
                "_finished": "2015-10-23T21:31:58.435Z",
                "_scores": {
                  "value" :12.87494045337280
                }
              }
    /model:
      get:
        description: Retrieve the trained python model produced by a specific experiment by ID
        responses:
          200:
            body:
              binary/octet-stream:
              example: |
                {
                  "_id": "5b634f2a36e5380032a7c55b",
                  "filename": "model_5b634f2236e5380032a7c55a.pkl",
                  "mimetype": "application/octet-stream",
                  "timestamp": 1533234986515
                }
          400:
            body:
              example: |
              {
                "error": "'model_' file for experiment 5b634c99093afb003174b306 does not exist"
              }
    /script:
      get:
        description: Retrieve the python script used to run the model produced by a specific experiment by ID
        responses:
          200:
            body:
              binary/octet-stream:
              example: |
                {
                  "_id": "5b634f2a36e5380032a7c55b",
                  "filename": "script_5b634f2236e5380032a7c55a.python",
                  "mimetype": "application/octet-stream",
                  "timestamp": 1533234986515
                }
          400:
            body:
              example: |
              {
                "error": "'script_' file for experiment 5b634c99093afb003174b306 does not exist"
              }
/machines:
  get:
    description: Retrieve all machines
    responses:
      200:
        body:
          example: |
            [
              {
                "_id": "5628fb1b17de50be077be348",
                "address": "http://cl21.uni.ac.uk:5081",
                "hostname": "cl21",
                "os": {
                  "type": "Darwin",
                  "platform": "darwin",
                  "arch": "x64",
                  "release": "13.4.0"
                },
                "cpus": ["Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz", "Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz", "Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz", "Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz", "Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz", "Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz", "Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz", "Intel(R) Core(TM) i7-3635QM CPU @ 2.40GHz"],
                "mem": "8GB",
                "gpus": [],
                "projects": {
                  "562cfff058bcb96a113cb946": {
                    "cwd": "./test",
                    "command": "node",
                    "args": ["rand.js","-optParams"],
                    "options": "plain",
                    "capacity": "0.3",
                    "results": "./test/experiments"
                  }
                }
              },
              {
                "_id": "563356d5616ea83042a60711",
                "address": "http://gpu2.uni.ac.uk:5081",
                "cpus": ["Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz"],
                "gpus": ["NVIDIA Corporation GK110B [GeForce GTX Titan Black] (rev a1)"],
                "hostname": "gpu2",
                "mem": "23.53GB",
                "os": {
                  "type": "Linux",
                  "platform": "linux",
                  "arch": "x64",
                  "release": "3.19.0-31-generic"
                },
                "projects": {
                  "562143a0f78b4abe2220ac1d": {
                    "cwd": "/home/user/FGMachine/test",
                    "command": "node",
                    "args": ["rand.js","-optParameter"],
                    "options": "plain",
                    "capacity": 0.9,
                    "results": "/home/user/FGMachine/test/experiments"
                  }
                }
              }
            ]
  /{machineId}:
    get:
      description: Retrieve a specific machine by ID
      responses:
        200:
          body:
            example: |
              {
                "_id": "563356d5616ea83042a60711",
                "address": "http://gpu2.uni.ac.uk:5081",
                "cpus": ["Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz", "Intel(R) Core(TM) i7-2600K CPU @ 3.40GHz"],
                "gpus": ["NVIDIA Corporation GK110B [GeForce GTX Titan Black] (rev a1)"],
                "hostname": "gpu2",
                "mem": "23.53GB",
                "os": {
                  "type": "Linux",
                  "platform": "linux",
                  "arch": "x64",
                  "release": "3.19.0-31-generic"
                },
                "projects": {
                  "562143a0f78b4abe2220ac1d": {
                    "cwd": "/home/user/FGMachine/test",
                    "command": "node",
                    "args": ["rand.js","-optParameter"],
                    "options": "plain",
                    "capacity": 0.9,
                    "results": "/home/user/FGMachine/test/experiments"
                  }
                }
              }
    /projects:
      post:

        description: Registers machine projects
        body:
          application/json:
            example:
              {
              [ { name: 'BernoulliNB',
                      command: 'python',
                      cwd: 'machine/learn/BernoulliNB',
                      args: [Object],
                      options: 'double-dash',
                      capacity: '1',
                      results: 'machine/learn/BernoulliNB/tmp' },
                    { name: 'DecisionTreeClassifier',
                      command: 'python',
                      cwd: 'machine/learn/DecisionTreeClassifier',
                      args: [Object],
                      options: 'double-dash',
                      capacity: '1',
                      results: 'machine/learn/DecisionTreeClassifier/tmp' },
                    { name: 'DecisionTreeRegressor',
                      command: 'python',
                      cwd: 'machine/learn/DecisionTreeRegressor',
                      args: [Object],
                      options: 'double-dash',
                      capacity: '1',
                      results: 'machine/learn/DecisionTreeRegressor/tmp' }
              ]
              }
/files:
  /{fileId}:
    get:
      description: Retrieve a specific file by ID
      responses:
        200:
          body:
            binary/octet-stream:
/datasets:
  get:
    description: get all datasets
    responses:
      200:
        body:
          description: List of details for all datasets.  See /datasets/{datasetId} for details.
          example: {
            [
                {
                    "_id": "5bf4841c9fc83c002cdbf5e6",
                    "name": "appendicitis",
                    "username": "testuser",
                    "files": [
                        {
                            "_id": "5bf4841c9fc83c002cdbf5e8",
                            "filename": "appendicitis.csv",
                            "mimetype": "text/csv",
                            "dependent_col": "class",
                            "timestamp": 1542751267786
                        }
                    ],
                    "metafeatures": {
                        "class_prob_max": 0.8018867924528302,
                        "class_prob_mean": 0.5,
                        "class_prob_median": 0.5,
                        "class_prob_min": 0.19811320754716982,
                        "class_prob_std": 0.4269323961881042,
                        "corr_with_dependent_abs_25p": null,
                        "corr_with_dependent_abs_75p": null,
                        "corr_with_dependent_abs_kurtosis": null,
                        "corr_with_dependent_abs_max": null,
                        "corr_with_dependent_abs_mean": null,
                        "corr_with_dependent_abs_median": null,
                        "corr_with_dependent_abs_min": null,
                        "corr_with_dependent_abs_skew": null,
                        "corr_with_dependent_abs_std": null,
                        "diversity_fraction": 0.822528983974963,
                        "entropy_dependent": 0.49777562247179563,
                        "kurtosis_kurtosis": 4.452150103293069,
                        "kurtosis_max": 5.319422971587894,
                        "kurtosis_mean": 1.337358676553602,
                        "kurtosis_median": 0.8241556149720961,
                        "kurtosis_min": -0.064662454053662,
                        "kurtosis_skew": 2.049814018854758,
                        "kurtosis_std": 1.7321483030218767,
                        "n_categorical": 0,
                        "n_classes": 2,
                        "n_columns": 8,
                        "n_numerical": 7,
                        "n_rows": 106,
                        "pca_fraction_95": 0.42857142857142855,
                        "ratio_rowcol": 13.25,
                        "skew_kurtosis": -0.8072038717745542,
                        "skew_max": 2.0405760464786686,
                        "skew_mean": 0.23121482439885738,
                        "skew_median": 0.20576966206912586,
                        "skew_min": -1.2122210852887918,
                        "skew_skew": 0.24606691449283033,
                        "skew_std": 1.1148468812633117,
                        "symbols_kurtosis": null,
                        "symbols_max": null,
                        "symbols_mean": null,
                        "symbols_min": null,
                        "symbols_skew": null,
                        "symbols_std": null,
                        "symbols_sum": null
                    }
                },
                {
                    "_id": "5bf4841c9fc83c002cdbf5e7",
                    "name": "breast-cancer",
                    "username": "testuser",
                    "files": [
                        {
                            "_id": "5bf484209fc83c002cdbf5e9",
                            "filename": "breast-cancer.csv",
                            "mimetype": "text/csv",
                            "dependent_col": "class",
                            "timestamp": 1542751267784
                        }
                    ],
                    "metafeatures": {
                        "class_prob_max": 0.7027972027972028,
                        "class_prob_mean": 0.5,
                        "class_prob_median": 0.5,
                        "class_prob_min": 0.2972027972027972,
                        "class_prob_std": 0.28679855460713116,
                        "corr_with_dependent_abs_25p": null,
                        "corr_with_dependent_abs_75p": null,
                        "corr_with_dependent_abs_kurtosis": null,
                        "corr_with_dependent_abs_max": null,
                        "corr_with_dependent_abs_mean": null,
                        "corr_with_dependent_abs_median": null,
                        "corr_with_dependent_abs_min": null,
                        "corr_with_dependent_abs_skew": null,
                        "corr_with_dependent_abs_std": null,
                        "diversity_fraction": 0.9188139686566354,
                        "entropy_dependent": 0.6084755754298137,
                        "kurtosis_kurtosis": -0.9900395306465448,
                        "kurtosis_max": 0.8659367562086295,
                        "kurtosis_mean": -0.5426446947254934,
                        "kurtosis_median": -0.46945225008620817,
                        "kurtosis_min": -1.9979453284763162,
                        "kurtosis_skew": -0.33196932701980525,
                        "kurtosis_std": 0.9494527294484085,
                        "n_categorical": 0,
                        "n_classes": 2,
                        "n_columns": 10,
                        "n_numerical": 9,
                        "n_rows": 286,
                        "pca_fraction_95": 0.6666666666666666,
                        "ratio_rowcol": 28.6,
                        "skew_kurtosis": -1.0280919230938976,
                        "skew_max": 1.4018277144361688,
                        "skew_mean": 0.48891123538860953,
                        "skew_median": 0.5036443477138223,
                        "skew_min": -0.14799309687736134,
                        "skew_skew": 0.5406178378373523,
                        "skew_std": 0.5328794145891989,
                        "symbols_kurtosis": null,
                        "symbols_max": null,
                        "symbols_mean": null,
                        "symbols_min": null,
                        "symbols_skew": null,
                        "symbols_std": null,
                        "symbols_sum": null
                    }
                }
            ]
            }
  /{datasetId}:
    get:
      description: Get a particular dataset
      responses:
        200:
          description: |
            files {
              -id - The id of the label encoded file object
              -raw-id - (optional) The raw file, if label encoded
              filename - human readable filename
              mimetype -
              dependent_col - name of the target column
              categorical_features - (optional) list of categorical features
              ordinal_features - (optional) map of ordinal features.  key is the feature name, value is an exhaustive ordered list of the values that feature can take
            }
            metafeatures - the dataset profile for this dataset

          body:
            example:
              {
    "_id": "5bf4841c9fc83c002cdbf5e6",
    "name": "appendicitis",
    "username": "testuser",
    "files": [
        {
            "_id": "5bf4841c9fc83c002cdbf5e8",
            "_raw_id" : "5bf4841c9fc83c002cdbfdfadfa",
            "filename": "appendicitis_categorical.csv",
            "mimetype": "text/csv",
            "dependent_col": "class",
            "categorical_features" : ["cat_feat_1", "cat_feat_2"],
            "ordinal_features" : {"ord_feat_1" : ["MALE", "FEMALE"], "ord_feat_2" : ["FIRST", "SECOND", "THIRD"]},
            "timestamp": 1542751267786
        }
    ],
    "metafeatures": {
        "class_prob_max": 0.8018867924528302,
        "class_prob_mean": 0.5,
        "class_prob_median": 0.5,
        "class_prob_min": 0.19811320754716982,
        "class_prob_std": 0.4269323961881042,
        "corr_with_dependent_abs_25p": null,
        "corr_with_dependent_abs_75p": null,
        "corr_with_dependent_abs_kurtosis": null,
        "corr_with_dependent_abs_max": null,
        "corr_with_dependent_abs_mean": null,
        "corr_with_dependent_abs_median": null,
        "corr_with_dependent_abs_min": null,
        "corr_with_dependent_abs_skew": null,
        "corr_with_dependent_abs_std": null,
        "diversity_fraction": 0.822528983974963,
        "entropy_dependent": 0.49777562247179563,
        "kurtosis_kurtosis": 4.452150103293069,
        "kurtosis_max": 5.319422971587894,
        "kurtosis_mean": 1.337358676553602,
        "kurtosis_median": 0.8241556149720961,
        "kurtosis_min": -0.064662454053662,
        "kurtosis_skew": 2.049814018854758,
        "kurtosis_std": 1.7321483030218767,
        "n_categorical": 0,
        "n_classes": 2,
        "n_columns": 8,
        "n_numerical": 7,
        "n_rows": 106,
        "pca_fraction_95": 0.42857142857142855,
        "ratio_rowcol": 13.25,
        "skew_kurtosis": -0.8072038717745542,
        "skew_max": 2.0405760464786686,
        "skew_mean": 0.23121482439885738,
        "skew_median": 0.20576966206912586,
        "skew_min": -1.2122210852887918,
        "skew_skew": 0.24606691449283033,
        "skew_std": 1.1148468812633117,
        "symbols_kurtosis": null,
        "symbols_max": null,
        "symbols_mean": null,
        "symbols_min": null,
        "symbols_skew": null,
        "symbols_std": null,
        "symbols_sum": null
    }
}
  put:
    description: Register a new datafile
    body:
      multipart/form-data:
        type: object
        description: |
          name - file name
          username - owner of the dataset
          dependent_col - name of the target column
          categorical_features - (optional) list of categorical features
          ordinal_features - (optional) map of ordinal features.  key is the feature name, value is an exhaustive ordered list of the values that feature can take

        example: {
          _files:file binary,
          _metadata: [
            name: "datasetName",
            username: "testUser",
            dependent_col: "class",
            categorical_features : ["cat_feat_1", "cat_feat_2"],
            ordinal_features : {"ord_feat_1" : ["MALE", "FEMALE"], "ord_feat_2" : ["FIRST", "SECOND", "THIRD"]}
          ]
          }
    responses:
      201:
        body:
          example: {
            message: "Files uploaded",
            dataset_id: dataset_id
            }
      400:
        body:
          example: {
            error: "Missing parameter _metadata.name"
            }
/webhooks:
  post:
    description: Create a new webhook
    responses:
      201:
        body:
          example: |
            {
              "status": "Registered",
              "options": {
                "url": "http://gpu2.uni.ac.uk:5000/webhook",
                "objects": "experiments",
                "object_id": "562aa731023155351a2ff060",
                "event": "finished"
              }
            }
      400:
        body:
          example: |
            {
              "error": "Invalid or empty URL"
            }
/preferences:
  get:
    description: get algorithm preferences for each user (note- does not include {version} in the baseUri)
    responses:
      200:
        body:
          example: |
          [
          {
              "_id": "5ba41716dfe741699222870f",
              "username": "testuser",
              "firstname": "Test",
              "lastname": "User",
              "algorithms": [
                  {
                      "_id": "5ba41716dfe7416992228714",
                      "name": "DecisionTreeClassifier",
                      "description": "Classifier that assigns a class to a sample based on a chained series of yes/no queries about the sample's features.",
                      "url": "http://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html",
                      "schema": {
                          "criterion": {
                              "description": "The function to measure the quality of a split. Supported criteria are “gini” for the Gini impurity and “entropy” for the information gain.",
                              "type": "enum",
                              "default": "gini",
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      "Gini impurity",
                                      "Information gain"
                                  ],
                                  "values": [
                                      "gini",
                                      "entropy"
                                  ]
                              }
                          },
                          "max_depth": {
                              "description": "The maximum depth of the tree. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples.",
                              "type": "int",
                              "default": 2,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      2,
                                      4,
                                      6,
                                      8
                                  ]
                              }
                          },
                          "min_samples_split": {
                              "description": "The minimum number of samples required to split an internal node.",
                              "type": "int",
                              "default": 5,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      5,
                                      10,
                                      20
                                  ]
                              }
                          },
                          "min_samples_leaf": {
                              "description": "The minimum number of samples required to be at a leaf node.",
                              "type": "int",
                              "default": 5,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      5,
                                      10,
                                      20
                                  ]
                              }
                          }
                      },
                      "category": "ML"
                  },
                  {
                      "_id": "5ba41716dfe7416992228717",
                      "name": "GradientBoostingClassifier",
                      "description": "An ensemble of decision trees that are iteratively trained on the dataset to minimize classification accuracy.",
                      "url": "http://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html",
                      "schema": {
                          "n_estimators": {
                              "description": "The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance.",
                              "type": "int",
                              "default": 100,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      100,
                                      250
                                  ]
                              }
                          },
                          "learning_rate": {
                              "description": "Learning rate shrinks the contribution of each tree by learning_rate. There is a trade-off between learning_rate and n_estimators.",
                              "type": "float",
                              "default": 0.1,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      0.01,
                                      0.1,
                                      1
                                  ]
                              }
                          },
                          "max_depth": {
                              "description": "Maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the in variables.",
                              "type": "int",
                              "default": 1,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      1,
                                      5,
                                      10
                                  ]
                              }
                          },
                          "min_samples_split": {
                              "description": "The minimum number of samples required to split an internal node.",
                              "type": "int",
                              "default": 5,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      5,
                                      10,
                                      20
                                  ]
                              }
                          },
                          "min_samples_leaf": {
                              "description": "The minimum number of samples required to be at a leaf node.",
                              "type": "int",
                              "default": 5,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      5,
                                      10,
                                      20
                                  ]
                              }
                          },
                          "subsample": {
                              "description": "The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. subsample interacts with the parameter n_estimators. Choosing subsample < 1.0 leads to a reduction of variance and an increase in bias.",
                              "type": "float",
                              "default": 1,
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      0.5,
                                      1
                                  ]
                              }
                          },
                          "max_features": {
                              "description": "The number of features to consider when looking for the best split.",
                              "type": "string",
                              "default": "sqrt",
                              "ui": {
                                  "style": "radio",
                                  "choices": [
                                      "Square root",
                                      "Log2"
                                  ],
                                  "values": [
                                      "sqrt",
                                      "log2"
                                  ]
                              }
                          }
                      },
                      "category": "ML"
                  }
              ]
          }
      ]
