/* ~This file is part of the Aliro library~

Copyright (C) 2023 Epistasis Lab, 
Center for Artificial Intelligence Research and Education (CAIRE),
Department of Computational Biomedicine (CBM),
Cedars-Sinai Medical Center.

Aliro is maintained by:
    - Hyunjun Choi (hyunjun.choi@cshs.org)
    - Miguel Hernandez (miguel.e.hernandez@cshs.org)
    - Nick Matsumoto (nicholas.matsumoto@cshs.org)
    - Jay Moran (jay.moran@cshs.org)
    - and many other generous open source contributors

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

(Autogenerated header, do not modify)

*/
import React, {useState, useEffect} from 'react';
import MediaQuery from 'react-responsive';
import DeviceWatcher from '../../../utils/device-watcher';
import { Menu, Dropdown, Icon } from 'semantic-ui-react';
import { Link } from 'react-router';

import PopUpAPI from '../../PopUpAPI'


/**
* child component of menu bar - if preferences successfully retrieved, create
* menu bar with links to other sections of site
*/

// openaiapiState={seen:false};
// const [openaiapiState, openaiapiState]= useState

// const [text, setText] = useState('');






function checkAPIkey(e) {

  console.log("checkAPIkey")
  let testBoolean = true;
  // if true, call 
  if(testBoolean)
  {
    toggleChatGPT(e)
  }
  // else
  {
    // show popup window to ask users to put api key

  }
}

function toggleChatGPT(e) {
  

  console.log("e.target.className",e.target.className)

  if (e.target.className === "chat icon") {
    
    console.log("chat icon")
    console.log("e.target.className", e.target.className)

    // e.target.parentElement.style.backgroundColor = "rgba(0,0,0,0.1)";

    // e.target.className = "link active";


    // console.log("e.target.parentElement.style ",e.target.parentElement.style )

    
    if (document.getElementById("chatgpt-space").style.visibility == "hidden")
    {
      // document.getElementsByClassName("chartschat")[0].style.width = "100%";
      // // make chatgpt-space visible
      // console.log("make chatgpt-space hidden")
      // document.getElementById("chatgpt-space").style.visibility = "visible"

      var chartschat = document.getElementsByClassName("chartschat");

      for (var i = 0; i < chartschat.length; i++) {
        chartschat[i].style.width = "49%";
      }



      var sliders = document.getElementsByClassName("slider");

      for (var i = 0; i < sliders.length; i++) {
        sliders[i].style.width = "1%";

      }


      console.log("make chatgpt-space visible")
      document.getElementById("chatgpt-space").style.visibility ="visible"

      var sliders = document.getElementsByClassName("slider");

      for (var i = 0; i < sliders.length; i++) {
        sliders[i].style.visibility ="visible";
      } 



    }
    else
    {


      var chartschat = document.getElementsByClassName("chartschat");

      for (var i = 0; i < chartschat.length; i++) {
        chartschat[i].style.width = "100%";
      }
      // make chatgpt-space visible
      console.log("make chatgpt-space hidden")
      document.getElementById("chatgpt-space").style.visibility = "hidden"

      var sliders = document.getElementsByClassName("slider");

      for (var i = 0; i < sliders.length; i++) {
        sliders[i].style.visibility ="hidden";
      }

      

      // document.getElementsByClassName("chartschat")[0].style.width = "50%";
      // console.log("make chatgpt-space visible")
      // document.getElementById("chatgpt-space").style.visibility ="hidden"
    }

  }

  else{

    console.log("e.target.parentElement.parentElement", e.target.parentElement.parentElement)
    // grand parent element
    // e.target.parentElement.parentElement.style.backgroundColor = "rgba(0,0,0,0.1)";
    // e.target.parentElement.parentElement.className = "link active";
    // console.log("e.target.parentElement.parentElement.style",e.target.parentElement.parentElement.style)


    if (document.getElementById("chatgpt-space").style.visibility == "hidden")
    {
      // document.getElementsByClassName("chartschat")[0].style.width = "100%";
      var chartschat = document.getElementsByClassName("chartschat");

      for (var i = 0; i < chartschat.length; i++) {
        chartschat[i].style.width = "49%";
      }

      var sliders = document.getElementsByClassName("slider");

      for (var i = 0; i < sliders.length; i++) {
        sliders[i].style.width = "1%";
      }
      
      // make chatgpt-space visible
      document.getElementById("chatgpt-space").style.visibility = "visible"

      var sliders = document.getElementsByClassName("slider");

      for (var i = 0; i < sliders.length; i++) {
        sliders[i].style.visibility ="visible";
      }





    }
    else
    {
      var chartschat = document.getElementsByClassName("chartschat");

      for (var i = 0; i < chartschat.length; i++) {
        chartschat[i].style.width = "100%";
      }

      var sliders = document.getElementsByClassName("slider");

      for (var i = 0; i < sliders.length; i++) {
        sliders[i].style.visibility ="hidden";
      }
      document.getElementById("chatgpt-space").style.visibility ="hidden"
      // chage width 100%
      
    }
    
  }




}
function Navbar({ preferences }) {
  const getUserTrigger = () => {

    


    return (
      <Menu.Item>
        <Icon name="user" />
        <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
          {preferences.username} <Icon name="caret down" />
        </MediaQuery>
      </Menu.Item>
    );
  };

  const [openaiApiState, setopenaiApiState] = useState(0);


  const [error, setError] = useState(null);


  useEffect(() => {
    checkConnectionOpenAI();
    console.log('openaiApiState in useEffect',openaiApiState);
  }, []);

  // useEffect(() => {
  //   console.log("useEffect in Navbar!")


  //   fetch("http://localhost:5080/openai/v1/connections",{
  //     mode: 'no-cors',
  //     method: "post",
  //     headers: {
  //          "Content-Type": "application/json"
  //     }
  //     })
  //     // .then(res => res.json())
  //     .then(res => console.log("res",res))
  //     .then(
  //       (result) => {
  //         console.log("hey result",result)
  //         setIsLoaded(true);
  //         setItems(result);
  //       },
  //       // Note: it's important to handle errors here
  //       // instead of a catch() block so that we don't swallow
  //       // exceptions from actual bugs in components.
  //       (error) => {
  //         setIsLoaded(true);
  //         setError(error);
  //         console.log("hey failed",error);
  //       }
  //     )
  // }, [])

const checkConnectionOpenAI = () => {
    // POST /openai/v1/connections
    fetch('openai/v1/configs')
    // fetch('/openai/v1/connections')
        .then((response) => {
            console.log("response.ok", response.ok)
            if (!response.ok) {
                console.log("error!!!")
                // throw new Error(`HTTP error: ${response.status}`);
                return 0;
                // setopenaiApiState(0);
            } else {
                console.log("response_checkConnectionOpenAI", response)
                return response.text();
                
            }

        })
        .then((text) => {
            let parsed = JSON.parse(text);
            console.log("parsed", parsed)
            // return 1;

            // make openaiApiState === 1 using setopenaiApiState
            setopenaiApiState(1);

            console.log("openaiApiState in checkConnectionOpenAI", openaiApiState)
        });

}


  const togglePop = (e) => {

    checkConnectionOpenAI();

    console.log('openaiApiState',openaiApiState);

    if (openaiApiState === 1)
    {
      console.log("openaiApiState === 1")
      

      let block = document.getElementsByClassName("chartsbaseleft")[0];
      let slider = document.getElementsByClassName("slider")[0];

      if (block && slider) {

        console.log("in block && slider")

        block.style.visibility = "visible";
        slider.style.visibility = "visible";
      }

      
      toggleChatGPT(e);
    }
  
  };






  return (
    <Menu inverted color="grey" fixed="top" size="large" borderless>
      <Link to="datasets" className="link">
        <Menu.Item header name="Aliro" />
      </Link>
      <MediaQuery minWidth={DeviceWatcher.breakpoints.MAX_MOBILE}>
        <Menu.Item name="Your Friendly AI assistant" />
      </MediaQuery>
      {preferences &&
        <Menu.Menu position="right">
          <Link to="datasets" className="link" activeClassName="active">
            <Menu.Item name="Datasets">
              <Icon name="file text outline" />
              <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                {'Datasets'}
              </MediaQuery>
            </Menu.Item>
          </Link>


          { window.location.href.includes('results') ? <Link to="" className="link" activeClassName="active" onClick = {togglePop}>
            {/* <Link to="" className="link" activeClassName="active" onClick = {checkAPIkey}> */}
            {/* <Link to="" className="link" activeClassName="active" onClick = {toggleChatGPT}> */}
              <Menu.Item name="Expert">
                <Icon name="chat" />
                
                <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                  {'Expert'}
                </MediaQuery>
              </Menu.Item>
            </Link> : null}
            

            <div>
              {/* if openaiApiState===1, show null */}
              {/* if ===0, show popup */}
              {/* {openaiApiState ? null : <PopUpAPI toggle={togglePop} />} */}

              
            </div>
          

          
          <Link to="experiments" className="link" activeClassName="active">
            <Menu.Item name="Experiments">
              <Icon name="lab" />
              <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                {'Experiments'}
              </MediaQuery>
            </Menu.Item>
          </Link>
          <Link to="admin" className="link" activeClassName="active">
            <Menu.Item name="Admin">
              <Icon name="wrench" />
              <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                {'Admin'}
              </MediaQuery>
            </Menu.Item>
          </Link>
          {/* if machine is not window then do not show below item */}
          
          {/* <Menu.Item id='user_item'>
            <Icon name="user" />
            <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
              {preferences.username}
            </MediaQuery>
          </Menu.Item> */}

          {/* {window.navigator.oscpu==='Intel Mac OS X 10.15'? */}

          {/* mac os, ubuntu, window */}
          {/* my idea */}

          {/* {window.navigator.oscpu==='Intel Mac OS X 10.15.' ||  */}
          {window.navigator.oscpu==='Intel Mac OS X 10.15.' ?

                <Menu.Item id='user_item'>
                <Icon name="user" />
                <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                  {preferences.username}
                </MediaQuery>
                </Menu.Item> :

            // empty div
            <div></div>

          }

        </Menu.Menu>
      }
    </Menu>
  );
}

export default Navbar;
