/* ~This file is part of the Aliro library~

Copyright (C) 2023 Epistasis Lab, 
Center for Artificial Intelligence Research and Education (CAIRE),
Department of Computational Biomedicine (CBM),
Cedars-Sinai Medical Center.

Aliro is maintained by:
    - Hyunjun Choi (hyunjun.choi@cshs.org)
    - Miguel Hernandez (miguel.e.hernandez@cshs.org)
    - Nick Matsumoto (nicholas.matsumoto@cshs.org)
    - Jay Moran (jay.moran@cshs.org)
    - and many other generous open source contributors

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <https://www.gnu.org/licenses/>.

(Autogenerated header, do not modify)

*/
import React, {useState, useEffect} from 'react';
import MediaQuery from 'react-responsive';
import DeviceWatcher from '../../../utils/device-watcher';
import { Menu, Dropdown, Icon } from 'semantic-ui-react';
import { Link } from 'react-router';

import PopUpAPI from '../../PopUpAPI'


/**
* child component of menu bar - if preferences successfully retrieved, create
* menu bar with links to other sections of site
*/



function Navbar({ preferences }) {
  const getUserTrigger = () => {

    


    return (
      <Menu.Item>
        <Icon name="user" />
        <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
          {preferences.username} <Icon name="caret down" />
        </MediaQuery>
      </Menu.Item>
    );
  };

  const [openaiApiState, setopenaiApiState] = useState(0);


  // const [error, setError] = useState(null);


  function toggleChatGPT(e) {

    if (e.target.className === "chat icon") {
  
  
      if (document.getElementById("chatgpt-space").style.visibility == "hidden")
      {
  
        var chartschat = document.getElementsByClassName("chartschat");
  
        for (var i = 0; i < chartschat.length; i++) {
          chartschat[i].style.width = "49%";
        }
  
  
  
        var sliders = document.getElementsByClassName("slider");
  
        for (var i = 0; i < sliders.length; i++) {
          sliders[i].style.width = "1%";
  
        }
  
        document.getElementById("chatgpt-space").style.visibility ="visible"
  
        var sliders = document.getElementsByClassName("slider");
  
        for (var i = 0; i < sliders.length; i++) {
          sliders[i].style.visibility ="visible";
        } 
      }
      else
      {
        var chartschat = document.getElementsByClassName("chartschat");
  
        for (var i = 0; i < chartschat.length; i++) {
          chartschat[i].style.width = "100%";
        }
        // make chatgpt-space visible
        document.getElementById("chatgpt-space").style.visibility = "hidden"
  
        var sliders = document.getElementsByClassName("slider");
  
        for (var i = 0; i < sliders.length; i++) {
          sliders[i].style.visibility ="hidden";
        }
      }
  
    }
  
    else{
  
      if (document.getElementById("chatgpt-space").style.visibility === "" || document.getElementById("chatgpt-space").style.visibility === "hidden")
      {
        
        // document.getElementsByClassName("chartschat")[0].style.width = "100%";
        var chartschat = document.getElementsByClassName("chartschat");
  
        for (var i = 0; i < chartschat.length; i++) {
          chartschat[i].style.width = "49%";
        }
  
        var sliders = document.getElementsByClassName("slider");
  
        for (var i = 0; i < sliders.length; i++) {
          sliders[i].style.width = "1%";
        }
        
        // make chatgpt-space visible
        document.getElementById("chatgpt-space").style.visibility = "visible"
  
        var sliders = document.getElementsByClassName("slider");
  
        for (var i = 0; i < sliders.length; i++) {
          sliders[i].style.visibility ="visible";
        }
      }
      else
      {
        console.log("else-part")
        var chartschat = document.getElementsByClassName("chartschat");
  
        for (var i = 0; i < chartschat.length; i++) {
          chartschat[i].style.width = "100%";
        }
  
        var sliders = document.getElementsByClassName("slider");
  
        for (var i = 0; i < sliders.length; i++) {
          sliders[i].style.visibility ="hidden";
        }
        document.getElementById("chatgpt-space").style.visibility ="hidden"
        // chage width 100%
      }
      
    }
  
  
  
  
  }

  // const checkConnectionOpenAI = () => {
    
  //   fetch('openai/v1/configs')
  //       .then((response) => {
  //           console.log("response.ok", response.ok)
  //           if (!response.ok) {
                
  //               return 0;
                
  //           } else {
  //               return response.text();
  //           }

  //       })
  //       .then((text) => {
  //           let parsed = JSON.parse(text);
  //           console.log("parsed", parsed)
           
  //       });

  // }


  const checkConnectionOpenAI = () => {
    
    // fetch('openai/v1/configs')
    fetch("/openai/v1/connections", {
      method: "POST",
      headers: {
          "Content-Type": "application/json"
      }
      })
        .then((response) => {
            console.log("response.ok", response.ok)
            if (!response.ok) {
                
                return 0;
                
            } else {
                return response.text();
            }

        })
        .then((text) => {
            let parsed = JSON.parse(text);
            console.log("parsed", parsed)
           
        });

  }

  const resetClassNameForResults = (e) => {

    // find all elements with className "chartschat"
    var chartschat = document.getElementsByClassName("chartschat");

    // second child of chartschat[0]
    var secondChild = chartschat[0].children[1];
    // className of secondChild
    var className = secondChild.className;

    // console.log("secondChild-className", className)
    if (className!="ui stackable three column grid")
    {
      chartschat[0].children[1].className = "ui stackable three column grid";
    }

  }

  const checkConnShowGPT = (e) => {
    // console.log("checkConnShowGPT")

    resetClassNameForResults(e);
    boldUnderline();
    checkConnectionOpenAI();

    console.log('openaiApiState',openaiApiState);

    // if openaiApiState >=1
    if (openaiApiState >= 1)
    {      

      let block = document.getElementsByClassName("chartsbaseleft")[0];
      let slider = document.getElementsByClassName("slider")[0];

      if (block && slider) {

        console.log("in block && slider")

        block.style.visibility = "visible";
        slider.style.visibility = "visible";
      }

      
      toggleChatGPT(e);
      // alert("Connection to OpenAI is established")
    }
    else
    {

      console.log("openaiApiState === 0")
      // alert("Please check your API key and connection to OpenAI")

      // get className modal
      var modal = document.getElementsByClassName("modal")[0];
      // make it visible
      modal.style.display = "block";

      // alert("Please provide your OpenAI API key.")
    }

  };


// This function is used to make the last element in chatbox tap bold and underlined.
 const boldUnderline = () => {

  //get div with class name sidemenu
  var sidemenu = document.getElementsByClassName("chatboxtap");
  
  for (var i = 0; i < sidemenu.length-1; i++) {
      sidemenu[i].style.fontWeight = "normal";
      // sidemenu[i].style.textDecoration = "none";
  }


  sidemenu[sidemenu.length-1].style.fontWeight = "bold";
  // sidemenu[sidemenu.length-1].style.textDecoration = "underline";

}


  useEffect(() => {
  
    checkConnectionOpenAI();
    // console.log("useEffect in Navbar")

  }, []);

  return (
    <Menu inverted color="grey" fixed="top" size="large" borderless>
      <Link to="datasets" className="link">
        <Menu.Item header name="Aliro" />
      </Link>
      <MediaQuery minWidth={DeviceWatcher.breakpoints.MAX_MOBILE}>
        <Menu.Item name="Your Friendly AI assistant" />
      </MediaQuery>
      {preferences &&
        <Menu.Menu position="right">
          <Link to="datasets" className="link" activeClassName="active">
            <Menu.Item name="Datasets">
              <Icon name="file text outline" />
              <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                {'Datasets'}
              </MediaQuery>
            </Menu.Item>
          </Link>


          { window.location.href.includes('results') ? <Link to="" id= "expertChatGPT" className="link" activeClassName="active" onClick = {checkConnShowGPT}>
              <Menu.Item name="Expert">
                <Icon name="chat" />
                <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                  {'Expert'}
                </MediaQuery>
              </Menu.Item>
            </Link> : null}
            

            <div>
              {window.location.href.includes('results') === true ? <PopUpAPI checkConnShowGPT={checkConnShowGPT}  openaiApiState={openaiApiState} setopenaiApiState={setopenaiApiState} /> : null}
            </div>
          

          
          <Link to="experiments" className="link" activeClassName="active">
            <Menu.Item name="Experiments">
              <Icon name="lab" />
              <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                {'Experiments'}
              </MediaQuery>
            </Menu.Item>
          </Link>
          <Link to="admin" className="link" activeClassName="active">
            <Menu.Item name="Admin">
              <Icon name="wrench" />
              <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                {'Admin'}
              </MediaQuery>
            </Menu.Item>
          </Link>
          {/* if machine is not window then do not show below item */}
          
          {/* <Menu.Item id='user_item'>
            <Icon name="user" />
            <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
              {preferences.username}
            </MediaQuery>
          </Menu.Item> */}

          {/* {window.navigator.oscpu==='Intel Mac OS X 10.15'? */}

          {/* mac os, ubuntu, window */}
          {/* my idea */}

          {/* {window.navigator.oscpu==='Intel Mac OS X 10.15.' ||  */}
          {window.navigator.oscpu==='Intel Mac OS X 10.15.' ?

                <Menu.Item id='user_item'>
                <Icon name="user" />
                <MediaQuery minWidth={DeviceWatcher.breakpoints.MIN_TABLET}>
                  {preferences.username}
                </MediaQuery>
                </Menu.Item> :

            // empty div
            <div></div>

          }

        </Menu.Menu>
      }
    </Menu>
  );
}

export default Navbar;
