// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic testing of fileupload react component full component snapshot 1`] = `
<div>
  <SceneHeader
    header="Submit Datasets"
  />
  <Form
    as="form"
    inverted={true}
  >
    <Segment
      className="file-upload-segment"
    >
      <Dropzone
        accept=".csv,.tsv,text/csv,text/tsv"
        multiple={false}
        onDropAccepted={[Function]}
        onDropRejected={[Function]}
      >
        <Component />
      </Dropzone>
      <Modal
        centered={true}
        closeIcon={true}
        closeOnDimmerClick={true}
        closeOnDocumentClick={false}
        dimmer={true}
        eventPool="Modal"
        onClose={[Function]}
        style={
          Object {
            "marginTop": "0",
          }
        }
      >
        <ModalHeader />
        <ModalContent />
      </Modal>
      <br />
      <div
        className="file-upload-form-hide-inputs"
        id="file-upload-form-input-area"
      >
        <Divider
          horizontal={true}
          inverted={true}
        >
          <Header
            as="h4"
            inverted={true}
          >
            Feature Specification
          </Header>
        </Divider>
        <Grid
          columns={4}
        >
          <GridRow>
            <GridColumn
              width={7}
            >
              <FormField
                className="inverted-dropdown-search"
                control={[Function]}
                inline={true}
                label="Dependent Feature"
                onChange={[Function]}
                options={Array []}
                placeholder="Select a feature"
                search={true}
              />
            </GridColumn>
            <GridColumn
              width={1}
            >
              <Popup
                content={
                  <div
                    className="content"
                  >
                    <p>
                       
                      The column that describes the label or output for each row.
    For example, if analyzing a dataset of patients with different types of diabetes,
    this column may have the values "type1", "type2", or "none".
                       
                    </p>
                  </div>
                }
                disabled={false}
                eventsEnabled={true}
                header="Dependent Column Help"
                offset={0}
                on="click"
                pinned={false}
                position="right center"
                trigger={
                  <Icon
                    as="i"
                    className="file-upload-help-icon"
                    color="blue"
                    inverted={true}
                    name="info circle"
                    size="large"
                  />
                }
              />
            </GridColumn>
            <GridColumn
              width={6}
            >
              <FormField
                className="inverted-dropdown-inline"
                control={[Function]}
                defaultValue="classification"
                inline={true}
                label="Prediction Type"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "key": "classification",
                      "text": "classification",
                      "value": "classification",
                    },
                    Object {
                      "key": "regression",
                      "text": "regression",
                      "value": "regression",
                    },
                  ]
                }
              />
            </GridColumn>
            <GridColumn
              width={2}
            >
              <Popup
                content={
                  <div
                    className="content"
                  >
                    <p>
                      <i>
                        Classification
                      </i>
                       algorithms are used to model discrete categorical outputs. Examples include modeling the color car someone might buy ("red", "green", "blue"...) or a disease state ("type1Diabetes", "type2Diabetes", "none"...)
                      <br />
                      <br />
                      <i>
                        Regression
                      </i>
                       algorithms are used to model a continuous valued output.  Examples include modeling the amount of money a house is predicted to sell for.
                    </p>
                  </div>
                }
                disabled={false}
                eventsEnabled={true}
                header="Prediction Type Help"
                offset={0}
                on="click"
                pinned={false}
                position="left center"
                trigger={
                  <Icon
                    as="i"
                    className="file-upload-help-icon"
                    color="blue"
                    inverted={true}
                    name="info circle"
                    size="large"
                  />
                }
              />
            </GridColumn>
          </GridRow>
        </Grid>
        <FormField
          label="Features Types"
          style={
            Object {
              "marginTop": "1em",
            }
          }
        />
        <div>
          <Grid
            columns={3}
          >
            <GridRow>
              <GridColumn>
                <FormInput
                  as={[Function]}
                  control={[Function]}
                >
                  <Modal
                    centered={true}
                    closeOnDimmerClick={false}
                    closeOnDocumentClick={false}
                    closeOnEscape={true}
                    dimmer={true}
                    disabled={false}
                    eventPool="Modal"
                    onClose={[Function]}
                    onOpen={[Function]}
                    open={false}
                    trigger={
                      <Button
                        as="button"
                        className="file-upload-button"
                        color="blue"
                        disabled={false}
                        fluid={true}
                        inverted={true}
                        size="small"
                      >
                        Set Ordinal
                      </Button>
                    }
                  >
                    <ModalHeader>
                      Ordinal Feature Input
                    </ModalHeader>
                    <ModalDescription
                      style={
                        Object {
                          "margin": "1em",
                          "width": "65%",
                        }
                      }
                    >
                      <p>
                         For each ordinal feature, enter one comma-separated line with the following format (this overrides selections in the Dataset Preview): 
                        <br />
                         [feature name],[1st unique value],[2nd unique value],...
                      </p>
                      <p>
                        For example:
                        <br />
                         month,jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec
                        <br />
                         day,mon,tue,wed,thu,fri,sat,sun
                      </p>
                      <p>
                        To populate this text box with all features and their unique values, close this window and use the button to set all feature types as ordinal. 
                      </p>
                      <br />
                    </ModalDescription>
                    <Form
                      as="form"
                    >
                      <textarea
                        className="file-upload-ordinal-text-area"
                        id="ordinal_features_text_area_input"
                        label="Ordinal Features"
                        onChange={[Function]}
                        placeholder="(No Ordinal features have been specified.)"
                        value=""
                      />
                    </Form>
                    <ModalActions>
                      <Button
                        as="button"
                        color="red"
                        content="Cancel"
                        inverted={true}
                        onClick={[Function]}
                        size="small"
                      />
                      <Button
                        as="button"
                        color="blue"
                        content="Accept"
                        icon="checkmark"
                        inverted={true}
                        onClick={[Function]}
                        positive={true}
                        size="small"
                      />
                    </ModalActions>
                  </Modal>
                  <Popup
                    content={
                      <div
                        className="content"
                      >
                        <p>
                          Ordinal features have a discrete number of categories, and the categories have a logical order (rank). Some examples include size ("small", "medium", "large"), or rank results ("first", "second", "third").
                          <br />
                          <br />
                          You can specify these features and their rank in two ways:
                          <br />
                          1) In the text input box opened by the button to the left, using the format described in the box 
                          <br />
                          2) or, in the Dataset Preview table below: use the dropdown boxes to specify ordinal features, then rank them using the drag-and-drop list of unique categories.
                        </p>
                      </div>
                    }
                    disabled={false}
                    eventsEnabled={true}
                    header="Ordinal Features Help"
                    offset={0}
                    on="click"
                    pinned={false}
                    position="right center"
                    trigger={
                      <Icon
                        as="i"
                        color="blue"
                        inverted={true}
                        name="info circle"
                        size="large"
                      />
                    }
                  />
                </FormInput>
              </GridColumn>
              <GridColumn>
                <FormInput
                  as={[Function]}
                  control={[Function]}
                >
                  <Modal
                    centered={true}
                    closeOnDimmerClick={false}
                    closeOnDocumentClick={false}
                    closeOnEscape={true}
                    dimmer={true}
                    eventPool="Modal"
                    onClose={[Function]}
                    onOpen={[Function]}
                    open={false}
                    trigger={
                      <Button
                        as="button"
                        className="file-upload-button"
                        color="blue"
                        disabled={false}
                        fluid={true}
                        inverted={true}
                        size="small"
                      >
                        Set Categorical
                      </Button>
                    }
                  >
                    <ModalHeader>
                      Categorical Feature Input
                    </ModalHeader>
                    <ModalDescription
                      style={
                        Object {
                          "margin": "1em",
                          "width": "65%",
                        }
                      }
                    >
                      <p>
                        Enter a comma-separated list to specify which features are Categorical.
                        <br />
                        This will override selections in the Dataset Preview. 
                      </p>
                      <p>
                        For example:
                        <br />
                         
                        <i>
                          sex,eye_color,hair_color,disease_state
                        </i>
                      </p>
                      <p>
                        Ranges - you can specify features using ranges. Each feature name in a range is converted to a column number within the data, and the range is expanded using the column numbers. For example, working from the example above in which we assume the features are present in the data in the same order as listed, entering 
                        <br />
                         
                        <i>
                          sex-disease_state
                        </i>
                        <br />
                        <br />
                        would expand to
                        <br />
                         
                        <i>
                          sex,eye_color,hair_color,disease_state
                        </i>
                      </p>
                      <br />
                    </ModalDescription>
                    <Form
                      as="form"
                    >
                      <textarea
                        className="file-upload-categorical-text-area"
                        id="categorical_features_text_area_input"
                        label="Categorical Features"
                        onBlur={[Function]}
                        onChange={[Function]}
                        placeholder="(No Categorical features have been specified)"
                        value=""
                      />
                    </Form>
                    <ModalActions>
                      <Button
                        as="button"
                        color="red"
                        content="Cancel"
                        inverted={true}
                        onClick={[Function]}
                        size="small"
                      />
                      <Button
                        as="button"
                        color="blue"
                        content="Accept"
                        icon="checkmark"
                        inverted={true}
                        onClick={[Function]}
                        positive={true}
                        size="small"
                      />
                    </ModalActions>
                  </Modal>
                  <Popup
                    content={
                      <div
                        className="content"
                      >
                        <p>
                          This site is using 'Categorical' to mean a Nominal feature, per custom in the ML community. Categorical features have a discrete number of categories that do not have an intrinsic order. Some examples include sex ("male", "female") or eye color ("brown", "green", "blue"...).
                          <br />
                          <br />
                          You can specify these features in two ways:
                          <br />
                          1) In the text input box opened by the button to the left, using the format described in the box 
                          <br />
                          2) or, in the Dataset Preview table below: use the dropdown boxes to specify categorical features.
                        </p>
                      </div>
                    }
                    disabled={false}
                    eventsEnabled={true}
                    header="Categorical Features Help"
                    offset={0}
                    on="click"
                    pinned={false}
                    position="right center"
                    trigger={
                      <Icon
                        as="i"
                        color="blue"
                        inverted={true}
                        name="info circle"
                        size="large"
                      />
                    }
                  />
                </FormInput>
              </GridColumn>
              <GridColumn>
                <FormInput
                  as={[Function]}
                  control={[Function]}
                >
                  <Button
                    as="button"
                    className="file-upload-button"
                    color="blue"
                    content="Set All To..."
                    fluid={true}
                    inverted={true}
                    onClick={[Function]}
                    size="small"
                  />
                  <div
                    style={
                      Object {
                        "display": "none",
                      }
                    }
                  >
                    <Menu
                      open={false}
                      vertical={true}
                    >
                      <MenuItem
                        content="Categorical"
                        onClick={[Function]}
                      />
                      <MenuItem
                        content="Ordinal"
                        onClick={[Function]}
                      />
                      <MenuItem
                        content={
                          <React.Fragment>
                            Numeric / Categorical
                            <div>
                              (auto-detect)
                            </div>
                          </React.Fragment>
                        }
                        onClick={[Function]}
                      />
                    </Menu>
                  </div>
                </FormInput>
              </GridColumn>
            </GridRow>
          </Grid>
        </div>
        <Divider
          horizontal={true}
          inverted={true}
        >
          <Header
            as="h4"
            inverted={true}
          >
            Submit
          </Header>
        </Divider>
        <FormInput
          as={[Function]}
          control={[Function]}
        >
          <Button
            as="button"
            className="file-upload-button"
            color="blue"
            content="Submit Dataset"
            icon="upload"
            inverted={true}
            onClick={[Function]}
          />
        </FormInput>
      </div>
    </Segment>
  </Form>
  <p
    style={
      Object {
        "display": "none",
      }
    }
  >
     hi 
  </p>
</div>
`;
