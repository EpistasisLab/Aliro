// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`basic testing of fileupload react component DONE - full component snapshot 1`] = `
<div>
  <SceneHeader
    header="Upload Datasets"
  />
  <Form
    as="form"
    inverted={true}
  >
    <Segment
      className="file-upload-segment"
    >
      <Dropzone
        accept=".csv,.tsv,text/csv,text/tsv"
        id="file-dropzone"
        multiple={false}
        onDropAccepted={[Function]}
        onDropRejected={[Function]}
      >
        <Component />
      </Dropzone>
      <br />
      <div
        className="file-upload-form-hide-inputs"
        id="file-upload-form-input-area"
      >
        <Divider
          horizontal={true}
          inverted={true}
        >
          <Header
            as="h4"
            inverted={true}
          >
            Specification
          </Header>
        </Divider>
        <Grid
          columns={4}
        >
          <GridRow>
            <GridColumn
              width={6}
            >
              <FormField
                className="inverted-dropdown-search"
                control={[Function]}
                fluid={true}
                id="target_dropdown"
                inline={true}
                label="Target"
                onChange={[Function]}
                options={Array []}
                placeholder="Select a column"
                search={true}
              />
            </GridColumn>
            <GridColumn
              style={
                Object {
                  "marginTop": "1.9em",
                  "paddingLeft": "0",
                }
              }
              width={2}
            >
              <Popup
                content={
                  <div
                    className="content"
                  >
                    <p>
                       
                      The column that describes the label or output for each row.
    For example, if analyzing a dataset of patients with different types of diabetes,
    this column may have the values "type1", "type2", or "none".
                       
                    </p>
                  </div>
                }
                disabled={false}
                eventsEnabled={true}
                header="Target Column Help"
                offset={0}
                on="click"
                pinned={false}
                position="right center"
                trigger={
                  <Icon
                    as="i"
                    className="file-upload-help-icon"
                    color="blue"
                    inverted={true}
                    name="info circle"
                    size="large"
                  />
                }
              />
            </GridColumn>
            <GridColumn
              width={6}
            >
              <FormField
                className="inverted-dropdown-inline"
                control={[Function]}
                defaultValue="classification"
                fluid={true}
                id="prediction_type_dropdown"
                inline={true}
                label="Prediction Type"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "key": "classification",
                      "text": "classification",
                      "value": "classification",
                    },
                    Object {
                      "key": "regression",
                      "text": "regression",
                      "value": "regression",
                    },
                  ]
                }
              />
            </GridColumn>
            <GridColumn
              style={
                Object {
                  "marginTop": "1.9em",
                  "paddingLeft": "0",
                }
              }
              width={2}
            >
              <Popup
                content={
                  <div
                    className="content"
                  >
                    <p>
                      <i>
                        Classification
                      </i>
                       algorithms are used to model discrete categorical outputs. Examples include modeling the color car someone might buy ("red", "green", "blue"...) or a disease state ("type1Diabetes", "type2Diabetes", "none"...)
                      <br />
                      <br />
                      <i>
                        Regression
                      </i>
                       algorithms are used to model a continuous valued output.  Examples include modeling the amount of money a house is predicted to sell for.
                    </p>
                  </div>
                }
                disabled={false}
                eventsEnabled={true}
                header="Prediction Type Help"
                offset={0}
                on="click"
                pinned={false}
                position="left center"
                trigger={
                  <Icon
                    as="i"
                    className="file-upload-help-icon"
                    color="blue"
                    inverted={true}
                    name="info circle"
                    size="large"
                  />
                }
              />
            </GridColumn>
          </GridRow>
        </Grid>
        <FormField
          label="Features Types"
          style={
            Object {
              "marginTop": "1em",
            }
          }
        />
        <div>
          <Grid
            columns={3}
          >
            <GridRow>
              <GridColumn>
                <FormInput
                  as={[Function]}
                  control={[Function]}
                >
                  <Button
                    as="button"
                    className="file-upload-button"
                    color="blue"
                    content="Set Ordinal"
                    disabled={false}
                    fluid={true}
                    id="ord_features_text_input_open_button"
                    inverted={true}
                    onClick={[Function]}
                    size="small"
                  />
                  <Popup
                    content={
                      <div
                        className="content"
                      >
                        <p>
                          Ordinal features have a discrete number of categories, and the categories have a logical order (rank). Some examples include size ("small", "medium", "large"), or rank results ("first", "second", "third").
                          <br />
                          <br />
                          You can specify these features and their rank in two ways:
                          <br />
                          1) In the text input box opened by the button to the left, using the format described in the box 
                          <br />
                          2) or, in the Dataset Preview table below: use the dropdown boxes to specify ordinal features, then rank them using the drag-and-drop list of unique categories.
                        </p>
                      </div>
                    }
                    disabled={false}
                    eventsEnabled={true}
                    header="Ordinal Features Help"
                    offset={0}
                    on="click"
                    pinned={false}
                    position="right center"
                    trigger={
                      <Icon
                        as="i"
                        color="blue"
                        inverted={true}
                        name="info circle"
                        size="large"
                      />
                    }
                  />
                </FormInput>
              </GridColumn>
              <GridColumn>
                <FormInput
                  as={[Function]}
                  control={[Function]}
                >
                  <Button
                    as="button"
                    className="file-upload-button"
                    color="blue"
                    content="Set Categorical"
                    disabled={false}
                    fluid={true}
                    id="cat_features_text_input_open_button"
                    inverted={true}
                    onClick={[Function]}
                    size="small"
                  />
                  <Popup
                    content={
                      <div
                        className="content"
                      >
                        <p>
                          This site is using 'Categorical' to mean a Nominal feature, per custom in the ML community. Categorical features have a discrete number of categories that do not have an intrinsic order. Some examples include sex ("male", "female") or eye color ("brown", "green", "blue"...).
                          <br />
                          <br />
                          You can specify these features in two ways:
                          <br />
                          1) In the text input box opened by the button to the left, using the format described in the box 
                          <br />
                          2) or, in the Dataset Preview table below: use the dropdown boxes to specify categorical features.
                        </p>
                      </div>
                    }
                    disabled={false}
                    eventsEnabled={true}
                    header="Categorical Features Help"
                    offset={0}
                    on="click"
                    pinned={false}
                    position="right center"
                    trigger={
                      <Icon
                        as="i"
                        color="blue"
                        inverted={true}
                        name="info circle"
                        size="large"
                      />
                    }
                  />
                </FormInput>
              </GridColumn>
              <GridColumn>
                <FormInput
                  as={[Function]}
                  control={[Function]}
                >
                  <Button
                    as="button"
                    className="file-upload-button"
                    color="blue"
                    content="Set All To..."
                    fluid={true}
                    id="set_all_to_button"
                    inverted={true}
                    onClick={[Function]}
                    size="small"
                  />
                  <div
                    style={
                      Object {
                        "display": "none",
                      }
                    }
                  >
                    <Menu
                      id="set_all_to_menu"
                      open={false}
                      vertical={true}
                    >
                      <MenuItem
                        content="Categorical"
                        id="set_all_to_menu_categorical"
                        onClick={[Function]}
                      />
                      <MenuItem
                        content="Ordinal"
                        id="set_all_to_menu_ordinal"
                        onClick={[Function]}
                      />
                      <MenuItem
                        content={
                          <React.Fragment>
                            Numeric / Categorical
                            <div>
                              (auto-detect)
                            </div>
                          </React.Fragment>
                        }
                        id="set_all_to_menu_default"
                        onClick={[Function]}
                      />
                    </Menu>
                  </div>
                </FormInput>
              </GridColumn>
            </GridRow>
          </Grid>
        </div>
        <Divider
          horizontal={true}
          inverted={true}
        >
          <Header
            as="h4"
            inverted={true}
          >
             Upload 
          </Header>
        </Divider>
        <FormField
          style={
            Object {
              "float": "right",
            }
          }
        >
          <Button
            as="button"
            className="file-upload-button"
            color="red"
            content="Cancel"
            inverted={true}
            onClick={[Function]}
          />
          <Button
            as="button"
            className="file-upload-button"
            color="blue"
            content="Upload Dataset"
            icon="upload"
            inverted={true}
            onClick={[Function]}
          />
        </FormField>
      </div>
    </Segment>
  </Form>
  <p
    style={
      Object {
        "display": "none",
      }
    }
  >
     hi 
  </p>
</div>
`;
