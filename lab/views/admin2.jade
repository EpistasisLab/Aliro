extends ./layout.jade

block title
  title Idea Factory: Admin

block content
  .row
    h1 #[span.mega-octicon.octicon-clippy] Admin
    .col-xs-12.col-sm-6
      .card
        .card-header 
          h5 New Project Schema
        .card-block
          form#new-project
            fieldset.form-group
              input#schema.form-control-file(name="schema", type="file")
              small.text-muted Upload a valid project schema. The name of the JSON file will be used to name the project.
            button.btn.btn-primary.btn-sm(type="submit") Create Project
    .col-xs-12.col-sm-6
      .card
        .card-header 
          h5 Machines
        ul.list-group.list-group-flush
          - each machine in machines
             a(href="/machines/" + machine._id).list-group-item
              span(id="machine-status-#{machine._id}") #[span.octicon.octicon-device-desktop] 
              span #{machine.hostname}
    .col-xs-12      
      hr
    .col-xs-12
    - each project in projects
      .col-xs-12.col-sm-6.col-md-4
        .card
          .card-header
            h5.card-title #{project.name}
            h6.card-subtitle.text-muted #{project._id}
          .card-block
            label Category
            .input-group
              select.form-control.c-select.save-category
                - var categories = ['None', 'ML', 'AI']
                - each category in categories
                  option(selected=project.category == category) #{category}
              .input-group-btn   
                button.btn.btn-primary.save-category(type="button", data-id="#{project._id}") Save
            hr     
            label Add to Machine 
            .input-group
              select.form-control.c-select.add-to-machine
              .input-group-btn
                button.btn.btn-primary.add-to-machine(type="button", data-id="#{project._id}") #[span.octicon.octicon-plus]
          .card-footer
            a(href="/projects/" + project._id).card-link
              button.btn.btn-primary.btn-sm(type="button") #[span.octicon.octicon-beaker]
            a(href="/projects/" + project._id + "/optimisation").card-link
              button.btn.btn-primary.btn-sm(type="button") #[span.octicon.octicon-circuit-board]
            a(href="/projects/" + project._id + "/experiments").card-link
              button.btn.btn-primary.btn-sm(type="button") #[span.octicon.octicon-list-ordered]
            button.btn.btn-danger.btn-sm.delete(data-type="projects", data-id="#{project._id}", type="button").card-link #[span.octicon.octicon-trashcan]

block scripts
  script(src="/bower_components/lodash/dist/lodash.min.js")
  script.
    $(function() {
      var onlineMachines = [];

      // Make home button active
      $("#nav .nav-item:first-child").addClass("active");

      // Create new project
      $("#new-project").on("submit", function() {
        // Extract file
        var fd = new FormData($(this)[0]);
        // Send
        $.ajax({
          url: "/api/v1/projects/schema",
          type: "POST",
          data: fd,
          processData: false,
          contentType: false
        })
        .then(function() {
          location.reload(); // Refresh page
        })
        .catch(function(err) {
          alert(err.responseText); // Display server error
        });
        return false; // Stop event and propagation
      });

      // Add project template to machine
      $("button.add-to-machine").on("click", function() {
        var $el = $(this);
        var id = $el.data("id");
        var $select = $el.parent().prev();
        var address = $select.val();

        if (address) {
          // Send
          $.ajax({
            url: address + "/projects",
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify({project_id: id})
          })
          .then(function(resp) {
            alert(resp.msg);
          })
          .catch(function(err) {
            alert(err.responseText); // Display server error
          });
        }
        return false; // Stop event and propagation
      });

      // Add project category
      $("button.save-category").on("click", function() {
        var $el = $(this);
        var id = $el.data("id");
        var $select = $el.parent().prev();
        var category = $select.val();

        if (category != 'None') {
          // Send
          $.ajax({
            url: "/api/v1/projects/" + id + "/category",
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify({category: category})
          })
          .then(function(resp) {
            alert(resp.msg);
          })
          .catch(function(err) {
            alert(err.responseText); // Display server error
          });
        }
        return false; // Stop event and propagation
      });

      // Delete project or machine
      $("button.delete").on("click", function() {
        var $el = $(this);
        var type = $el.data("type");
        var id = $el.data("id");

        if (type === "projects") {
          var confirmDelete = confirm("Are you sure you want to delete this project and all associated experiments?");
          if (confirmDelete) {
            // Delete experiment files
            $.ajax({
              url: "/api/v1/projects/" + id + "/experiments/files",
              type: "DELETE"
            })
            .then(function() {
              // Then delete experiments
              $.ajax({
                url: "/api/v1/projects/" + id + "/experiments",
                type: "DELETE"
              })
              .then(function() {
                // Then delete project
                $.ajax({
                  url: "/api/v1/projects/" + id,
                  type: "DELETE"
                })
                .then(function() {
                  location.reload(); // Refresh page
                })
                .catch(function(err) {
                  console.log(err);
                });
              });
            })
            .catch(function(err) {
              console.log(err);
            });
          }
        } else {
          var confirmDelete = confirm("Are you sure you want to delete this machine?\nTo re-register, you will need to delete 'specs.json' before running FGMachine again.");
          if (confirmDelete) {
            // Delete machine
            $.ajax({
              url: "/api/v1/machines/" + id,
              type: "DELETE"
            })
            .then(function() {
              location.reload(); // Refresh page
            })
            .catch(function(err) {
              console.log(err);
            });
          }
        }
        return false; // Stop event and propagation
      });


      // Parse from string instead prior to accessing internal objects via Jade
      var machines = !{JSON.stringify(machines)};
      var $macDropdowns = $("select.add-to-machine");
      for (var i = 0; i < machines.length; i++) {
        (function(i) {
          // Indicate status of machines
          var host = machines[i].address.replace(/^http/, 'ws'); // WebSocket server address
          var ws = null; // WebSocket
          var $status = $("#machine-status-" + machines[i]._id); // Machine status icon
          var hostname = machines[i].hostname;
          var address = machines[i].address;

          // Connects to WebSocket server
          var wsConnect = function() {
            ws = new WebSocket(host); // Attempt to connect

            // Set server status as on
            ws.onopen = function(event) {
              // Set status
              $status.removeClass("text-danger");
              $status.addClass("text-success");
              // Adjust machine dropdowns
              onlineMachines = _.union(onlineMachines, [hostname]);
              $macDropdowns.empty();
              for (var i = 0; i < onlineMachines.length; i++) {
                $macDropdowns.append("<option value='" + address + "'>" + hostname + "</option>");
              }
            };
            // Set server status as off
            ws.onclose = function(event) {
              // Set status
              $status.removeClass("text-success");
              $status.addClass("text-danger");
              // Adjust machine dropdowns
              _.pull(onlineMachines, hostname);
              $macDropdowns.empty();
              for (var i = 0; i < onlineMachines.length; i++) {
                $macDropdowns.append("<option value='" + address + "'>" + hostname + "</option>");
              }
            };
          };

          // Reconnects to WebSocket server if needed
          var wsReconnect = function() {
            if (!ws || ws.readyState === WebSocket.CLOSED) {
              wsConnect();
            }
          };

          // Connect 
          wsConnect();
          // Attempt to reconnect every 5s if necessary
          setInterval(wsReconnect, 5000);
        })(i); // Status indicators in function closure
      }
    });