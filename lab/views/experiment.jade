extends ./layout.jade

block title
  title FGLab: Experiment #{experiment._id}

block styles
  link(href="/bower_components/c3/c3.min.css", rel="stylesheet")
  style.
    #notes {
      border: solid;
    }
    #logs {
      max-height: 25rem;
      overflow: scroll;
    }

block content
  h1 #[span.mega-octicon.octicon-graph] Experiment: #{experiment._id}
  - if (experiment._status === "running")
    button#kill.btn.btn-danger Kill Experiment

  dl.dl-horizontal
    dt.col-sm-3 Status
    dd#status.col-sm-9 #{experiment._status} #[span.octicon]
    dt.col-sm-3 Project
    dd.col-sm-9 #[a(href="/projects/#{project._id}/experiments") #{project.name}]
    dt.col-sm-3 Machine
    dd.col-sm-9 #[a(href="/machines/#{machine._id}") #{machine.hostname}]
    if experiment._started
      dt.col-sm-3 Started
      dd#experiment-started.col-sm-9
    if experiment._finished
      dt.col-sm-3 Finished
      dd#experiment-finished.col-sm-9
    dt.col-sm-3 Options
    dd.col-sm-9
      ul.list-unstyled(style="margin-bottom: 0;")
        - each val, prop in experiment._options
          li #[strong #{prop}:] #{val}
    if experiment._scores
      each val, prop in experiment._scores
        dt.col-sm-3 #{prop}
        dd.col-sm-9 #{val}
    dt.col-sm-3 Notes 
    dd.col-sm-9 #[textarea#notes.form-control(rows="3") #{experiment._notes}]
    - if (experiment.files.length > 0)
      dt.col-sm-3 Files
      dd.col-sm-9
        ul#files.list-unstyled(style="margin-bottom: 0;")
    - for (var key in experiment)
      if (key[0] !== "_")
        dt.col-sm-3 #{key}
        dd.col-sm-9= experiment[key]
    if experiment._charts
      dt.col-sm-3 Charts
      dd.col-sm-9
  if experiment._charts
    #charts
      each val, ind in experiment._charts
        div(id= "chart" + ind)
  dl.dl-horizontal
    dt.col-sm-3 Logs
    dd.col-sm-9 #[#logs]

block scripts
  script(src="/bower_components/d3/d3.min.js")
  script(src="/bower_components/c3/c3.min.js")
  script(src="/bower_components/lodash/dist/lodash.min.js")
  script(src="/bower_components/largest-triangle-three-buckets/dist/largest-triangle-three-buckets.v0.1.0.min.js")
  script(src="/bower_components/moment/min/moment.min.js")
  script(src="/javascripts/chart.js")
  script.
    // Parse from string instead prior to accessing internal objects via Jade
    var experiment = !{JSON.stringify(experiment)};
    // C3 charts
    var c3Charts = [];

    $(function() {
      // Adjust status
      var status = experiment._status;
      var textClass;
      var iconClass;
      if (status === "success") {
        textClass = "text-success";
        iconClass = "octicon-check text-success";
      } else if (status === "fail") {
        textClass = "text-danger";
        iconClass = "octicon-circle-slash text-danger";
      } else if (status == "running") {
        textClass = "text-info";
        iconClass = "octicon-clock text-info";
      }
      $("#status").addClass(textClass);
      $("#status .octicon").addClass(iconClass);
      
      var interval;
      if(status == "running") {
        interval = setInterval(getStatus, 3000);
      }
     
     function getStatus() {
       $.ajax({
            url: "/api/v1/experiments/#{experiment._id}/status",
            type: "GET",
            contentType: "application/json",
            success: function(data) {
              if(data._status !== 'running') {
                clearInterval(interval);
                location.reload();
              }
            },
            error: function(err) {console.log(err);}
          });
     }

      // Add times
      if (experiment._started) {
        $("#experiment-started").html(moment().format(experiment._started));
      }
      if (experiment._finished) {
        $("#experiment-finished").html(moment().format(experiment._finished));
      }

      // Monitor notes
      var $notes = $("#notes");
      var oldNotes = $notes.val().trim();
      // Trigger every 0.5s
      $("#notes").on("change keyup paste", _.debounce(function() {
        // Ignore lack of changes
        var newNotes = $notes.val().trim();
        if (newNotes === "oldNotes") {
          return false;
        }

        $.ajax({
          url: "/api/v1/experiments/#{experiment._id}",
          type: "PUT",
          contentType: "application/json",
          data: JSON.stringify({_notes: newNotes})
        }).catch(function(err) {console.log(err);});
        return false; // Stop event and propagation
      }, 500));

      // Sort files by filename
      experiment.files = _.sortBy(experiment.files, "filename");
      // Add files
      var $files = $("#files");
      for (var i = 0; i < experiment.files.length; i++) {
        var file = experiment.files[i];
        if (file.mimetype.indexOf("image/") === 0) {
          $files.append("<li><img src='/api/v1/files/" + file._id + "' class='img-fluid'></li>");
        } else if (file.mimetype.indexOf("video/") === 0) {
          $files.append("<li><video controls><source src='/api/v1/files/" + file._id + "' type='" + file.mimetype + "'></video></li>");
        }
        $files.append("<li><a href='/api/v1/files/" + file._id + "'>" + file.filename + "</a></li>");
      }

      if (experiment._charts) {
        // Creates a linear scale
        var linScale = function(numEls, step, start) {
          return _.map(Array(numEls), function(val, ind) {
            return start + step*ind;
          });
        };

        // Use Largest-Triangle-Three-Buckets downsampling
        var downsampleFactor = 500;

        // If a single chart, turn into an array
        if (_.isPlainObject(experiment._charts)) {
          var tempChart = experiment._charts;
          experiment._charts = [tempChart];
          $("#charts").html("<div id='chart0'></div>"); // Add chart0 div
        }

        // Create charts
        for (var c = 0; c < experiment._charts.length; c++) {
          var chartData = experiment._charts[c];
          // Default chart options
          var chartDefaults = {
            bindto: "#chart" + c,
            point: {show: false},
            zoom: {enabled: true}
          };
          // Add default options
          _.defaultsDeep(chartData, chartDefaults);

          // Downsample dependent on x axis types
          if (chartData.data.xs) { // Multiple custom x axes
            // Loop over columns
            for (var i = 0; i < chartData.data.columns.length; i++) {
              // Get values
              var vals = chartData.data.columns[i];
              var valsKey = chartData.columnNames[i];
              // Get indices
              var indicesKey = chartData.data.xs[valsKey];
              if (indicesKey) {
                var indicesIndex = chartData.columnNames.indexOf(indicesKey);
                var indices = chartData.data.columns[indicesIndex];
                // Downsample
                var zippedValues = _.zip(indices, vals);
                var downsampledValues = _.unzip(largestTriangleThreeBuckets(zippedValues, downsampleFactor, 0, 1));
                // Replace values and indices
                chartData.data.columns[indicesIndex] = downsampledValues[0];
                chartData.data.columns[i] = downsampledValues[1];
              }
            }
          } else {
            var indices;
            if (chartData.data.x) { // Single custom x axis
              // Extract and remove custom x axis
              var indicesKey = chartData.data.x;
              delete chartData.data.x;
              var indicesIndex = chartData.columnNames.indexOf(indicesKey);
              indices = chartData.data.columns[indicesIndex];
              chartData.columnNames.splice(indicesIndex, 1);
              chartData.data.columns.splice(indicesIndex, 1);
            } else { // Linear x axis
              // Create linear scale
              indices = linScale(chartData.data.columns[0].length, 1, 1);
            }
            // Create a custom x axis for each column
            var xs = {};
            var xsColumns = [];
            for (var i = 0; i < chartData.data.columns.length; i++) {
              // Get values
              var vals = chartData.data.columns[i];
              var valsKey = chartData.columnNames[i];
              // Downsample
              var zippedValues = _.zip(indices, vals);
              var downsampledValues = _.unzip(largestTriangleThreeBuckets(zippedValues, downsampleFactor, 0, 1));
              // Replace values
              chartData.data.columns[i] = downsampledValues[1];
              // Add axis key
              xs[valsKey] = "_x" + i;
              // Add new axis to column names
              chartData.columnNames.push("_x" + i);
              // Push new axis to temporary collection
              xsColumns.push(downsampledValues[0]);
            }
            // Add xs to chartData
            chartData.data.xs = xs;
            // Push new axes to columns
            for (var i = 0; i < xsColumns.length; i++) {
              chartData.data.columns.push(xsColumns[i]);
            }
          }

          // Loop over data to add column names
          for (var i = 0; i < chartData.data.columns.length; i++) {
            chartData.data.columns[i].unshift(chartData.columnNames[i]);
          }

          // Render
          c3Charts.push(c3.generate(chartData));
          // Remove position: relative property that blocks the top of the page
          $("#chart" + c).css("position", "static");

          // Render chart in Web Worker
          // TODO Add Web Worker support with jsdom and benv?
          /*
          var worker = new Worker("/javascripts/chart.js");
          // Push rendered chart
          worker.addEventListener("message", function(e) {
            c3Charts.push(e.data);
          }, false);
          // Send chart
          worker.postMessage({chart: chart}); // Start worker
          */
        }
      }

      // Connect to experiment stdout
      var host = "#{machine.address}".replace(/^http/, 'ws'); // WebSocket server address
      var ws = null; // WebSocket
      var $logs = $("#logs"); // Live logs

      // Connects to WebSocket server
      var wsConnect = function() {
        ws = new WebSocket(host); // Attempt to connect
        
        // Register interest for logs
        ws.onopen = function() {
          ws.send("experiments:#{experiment._id}");
        };

        // Print messages
        ws.onmessage = function(event) {
          var data = JSON.parse(event.data);
          if (data.stdout) {
            $logs.append("<p class='text-muted'>" + data.stdout + "</p>");
          } else if (data.stderr) {
            $logs.append("<p class='text-danger'>" + data.stderr + "</p>");
          }
          // Automatically scroll
          $logs.prop("scrollTop", $logs.prop("scrollHeight"));
        };
      };

      // Reconnects to WebSocket server if needed
      var wsReconnect = function() {
        if (!ws || ws.readyState === WebSocket.CLOSED) {
          wsConnect();
        }
      };

      // Connect 
      wsConnect();
      // Attempt to reconnect every 5s if necessary
      setInterval(wsReconnect, 5000);

      // Kills experiment
      $("#kill").on("click", function() {
        $.ajax({
          url: "#{machine.address}/experiments/#{experiment._id}/kill",
          type: "POST"
        }).then(function(response) {
          location.reload(); // May have succeeded before kill
        }).catch(function(err) {console.log(err);});
        return false; // Stop event and propagation
      });
    });
