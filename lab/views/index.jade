extends ./layout.jade

block title
  title FGLab

block styles
  style.
    select.add-to-machine {
      width: auto;
    }

block content
  .row
    .col-sm-12.col-md-9
      .card
        .card-header
          h5 Machine Learning Methods
        .table-responsive  
          table#projects.table
            thead
              tr
                th Name
                th New Experiment
                th Hyperparameter Optimisation
                th Experiment Results
            tbody
              - each project in projects
                tr
                  td #{project.name}
                  td 
                    a(href="/projects/" + project._id)
                      button.btn.btn-primary-outline.btn-sm(type="button") #[span.octicon.octicon-beaker]
                  td 
                    a(href="/projects/" + project._id + "/optimisation")
                      button.btn.btn-primary-outline.btn-sm(type="button") #[span.octicon.octicon-circuit-board]
                  td 
                    a(href="/projects/" + project._id + "/experiments")
                      button.btn.btn-primary-outline.btn-sm(type="button") #[span.octicon.octicon-list-ordered]

    .col-sm-12.col-md-3
      .card
        .card-header
          h5 Machines
        table#machines.table
          tbody
            - each machine in machines
              tr
                td 
                  span(id="machine-status-#{machine._id}") #[span.octicon.octicon-primitive-dot]
                  a(href="/machines/" + machine._id) #{machine.hostname}

block scripts
  script(src="/bower_components/lodash/dist/lodash.min.js")
  script.
    $(function() {
      var onlineMachines = [];

      // Make home button active
      $("#nav .nav-item:first-child").addClass("active");

      // Create new project
      $("#new-project").on("submit", function() {
        // Extract file
        var fd = new FormData($(this)[0]);
        // Send
        $.ajax({
          url: "/api/v1/projects/schema",
          type: "POST",
          data: fd,
          processData: false,
          contentType: false
        })
        .then(function() {
          location.reload(); // Refresh page
        })
        .catch(function(err) {
          alert(err.responseText); // Display server error
        });
        return false; // Stop event and propagation
      });

      // Add project template to machine
      $("button.add-to-machine").on("click", function() {
        var $el = $(this);
        var id = $el.data("id");
        var $select = $el.prev();
        var address = $select.val();

        if (address) {
          // Send
          $.ajax({
            url: address + "/projects",
            type: "PUT",
            contentType: "application/json",
            data: JSON.stringify({project_id: id})
          })
          .then(function(resp) {
            alert(resp.msg);
          })
          .catch(function(err) {
            alert(err.responseText); // Display server error
          });
        }
        return false; // Stop event and propagation
      });

      // Delete project or machine
      $("button.delete").on("click", function() {
        var $el = $(this);
        var type = $el.data("type");
        var id = $el.data("id");

        if (type === "projects") {
          // Delete experiment files
          $.ajax({
            url: "/api/v1/projects/" + id + "/experiments/files",
            type: "DELETE"
          })
          .then(function() {
            // Then delete experiments
            $.ajax({
              url: "/api/v1/projects/" + id + "/experiments",
              type: "DELETE"
            })
            .then(function() {
              // Then delete project
              $.ajax({
                url: "/api/v1/projects/" + id,
                type: "DELETE"
              })
              .then(function() {
                location.reload(); // Refresh page
              })
              .catch(function(err) {
                console.log(err);
              });
            });
          })
          .catch(function(err) {
            console.log(err);
          });
        } else {
          // Delete machine
          $.ajax({
            url: "/api/v1/machines/" + id,
            type: "DELETE"
          })
          .then(function() {
            location.reload(); // Refresh page
          })
          .catch(function(err) {
            console.log(err);
          });
        }
        return false; // Stop event and propagation
      });


      // Parse from string instead prior to accessing internal objects via Jade
      var machines = !{JSON.stringify(machines)};
      var $macDropdowns = $("select.add-to-machine");
      for (var i = 0; i < machines.length; i++) {
        (function(i) {
          // Indicate status of machines
          var host = machines[i].address.replace(/^http/, 'ws'); // WebSocket server address
          var ws = null; // WebSocket
          var $status = $("#machine-status-" + machines[i]._id); // Machine status icon
          var hostname = machines[i].hostname;
          var address = machines[i].address;

          // Connects to WebSocket server
          var wsConnect = function() {
            ws = new WebSocket(host); // Attempt to connect

            // Set server status as on
            ws.onopen = function(event) {
              // Set status
              $status.removeClass("text-danger");
              $status.addClass("text-success");
              // Adjust machine dropdowns
              onlineMachines = _.union(onlineMachines, [hostname]);
              $macDropdowns.empty();
              for (var i = 0; i < onlineMachines.length; i++) {
                $macDropdowns.append("<option value='" + address + "'>" + hostname + "</option>");
              }
            };
            // Set server status as off
            ws.onclose = function(event) {
              // Set status
              $status.removeClass("text-success");
              $status.addClass("text-danger");
              // Adjust machine dropdowns
              _.pull(onlineMachines, hostname);
              $macDropdowns.empty();
              for (var i = 0; i < onlineMachines.length; i++) {
                $macDropdowns.append("<option value='" + address + "'>" + hostname + "</option>");
              }
            };
          };

          // Reconnects to WebSocket server if needed
          var wsReconnect = function() {
            if (!ws || ws.readyState === WebSocket.CLOSED) {
              wsConnect();
            }
          };

          // Connect 
          wsConnect();
          // Attempt to reconnect every 5s if necessary
          setInterval(wsReconnect, 5000);
        })(i); // Status indicators in function closure
      }
    });
