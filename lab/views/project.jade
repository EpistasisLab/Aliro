extends ./layout.jade

block title
  title FGLab: Project #{project.name}

block content
  .card
    .card-header
      h5 #[span.mega-octicon.octicon-beaker] New Experiment: #{project.name} #[small.text-muted (#{project._id})]
    .card-block
      form#new-experiment
        each val, key in project.schema
          if (val.type === "int")
            .form-group.row
              label.form-control-label.control-label.col-sm-3(for="#{key}") #[span.octicon.octicon-info(data-toggle="tooltip", data-placement="right", title="#{val.description}")] #{key}
              .col-sm-9
                input.form-control(type="number", value="#{val.default}", name="#{key}", id="#{key}", required)
          else if (val.type === "float")
            .form-group.row
              label.form-control-label.control-label.col-sm-3(for="#{key}") #[span.octicon.octicon-info(data-toggle="tooltip", data-placement="right", title="#{val.description}")] #{key}
              .col-sm-9
                input.form-control(type="number", value="#{val.default}", step="any", name="#{key}", id="#{key}", required)
          else if (val.type === "bool")
            // TODO Consider replacing with two radio buttons
            .form-group.row
              label.form-control-label.control-label.col-sm-3(for="#{key}") #[span.octicon.octicon-info(data-toggle="tooltip", data-placement="right", title="#{val.description}")] #{key}
              .col-sm-9
                input.form-control(type="text", value="#{val.default}", pattern="(true|false)", title="Enter true or false", name="#{key}", id="#{key}", required)
          else if (val.type === "string")
            .form-group.row
              label.form-control-label.control-label.col-sm-3(for="#{key}") #[span.octicon.octicon-info(data-toggle="tooltip", data-placement="right", title="#{val.description}")] #{key}
              .col-sm-9
                input.form-control(type="text", value="#{val.default}", name="#{key}", id="#{key}", required)
          else if (val.type === "enum")
            .form-group.row
              label.form-control-label.control-label.col-sm-3(for="#{key}") #[span.octicon.octicon-info(data-toggle="tooltip", data-placement="right", title="#{val.description}")] #{key}
              .col-sm-9
                select.form-control.c-select(name="#{key}", id="#{key}")
                  each value in val.values
                    if (value === val.default)
                      option(value="#{value}", selected) #{value}
                    else
                      option(value="#{value}") #{value}
          else if(val.type === "enum-checkbox")
           .form-group.row
              label.form-control-label.control-label.col-sm-3(for="#{key}") #[span.octicon.octicon-info(data-toggle="tooltip", data-placement="right", title="#{val.description}")] #{key}
              .col-sm-9
                .btn-group(data-toggle="buttons")
                   each value in val.values
                    label.btn.btn-primary-outline
                      input(type="checkbox", name="#{key}", id="#{key}", value="#{value}", autocomplete="off")
                      span #{value}
        input(type="range", value="90")              
        input#files.form-control-file(name="files", type="file", multiple)
        .form-group.row
          .col-sm-9.col-sm-offset-3
            button.btn.btn-primary(type="submit") Submit

block scripts
  script.
    // Parse from string instead prior to accessing internal objects via Jade
    var schema = !{JSON.stringify(project.schema)};

    $(function() {
      // Submits experiment
      $("#new-experiment").on("submit", function() {
        // Process form
        var formObj = {};
        var files = $(this).find(":file")[0].files;
        var fd = new FormData();
        $.each(files, function(index, value) {
            fd.append('_files', value);
        });
        // Loop over form simply (does not work on nested data)
        var hasErrors = false;
        // Do not process files as options
        $(this).find(":input").not(":file").not(":submit").each(function(ind, el) {
          var $el = $(el);
          var $formGroup = $el.closest(".form-group");
          // Remove previous validation
          $el.removeClass("form-control-success form-control-error");
          $formGroup.removeClass("has-success has-error");
          var name = $el.attr("name");
          var val = $el.val();
          // Validate
          if ($el.attr("type") === "number") {
            val = parseFloat(val);
            // Check floats
            if (isNaN(val)) {
              $el.addClass("form-control-error");
              $formGroup.addClass("has-error");
              hasErrors = true;
            } else {
              if ($el.attr("step")) {
                $el.addClass("form-control-success");
                $formGroup.addClass("has-success");
              } else {
                // Check ints
                if (val % 1 !== 0) {
                  $el.addClass("form-control-error");
                  $formGroup.addClass("has-error");
                  hasErrors = true;
                } else {
                  $el.addClass("form-control-success");
                  $formGroup.addClass("has-success");
                }
              }
            }
          } else if ($el.attr("pattern")) {
            if (val !== "true" && val !== "false") {
              // Check bools
              $el.addClass("form-control-error");
              $formGroup.addClass("has-error");
              hasErrors = true;
            } else {
              // Convert bools
              val = (val === "true");
              $el.addClass("form-control-success");
              $formGroup.addClass("has-success");
            }
          } else {
            if (val === "") {
              // Check strings
              $el.addClass("form-control-error");
              $formGroup.addClass("has-error");
              hasErrors = true;
            } else {
              $el.addClass("form-control-success");
              $formGroup.addClass("has-success");
            }
          }
          formObj[name] = val; // Set key and value
        });
        // Stop if form has errors
        if (hasErrors) {
          return false;
        }

        $.ajax({
          url: "/api/v1/projects/#{project._id}/experiment?" + $.param(formObj),
          type: "POST",
          data: fd,
          processData: false,
          contentType: false
        })
        .then(function(resp) {
          location.assign("/experiments/" + resp._id); // Move to new experiment page
        })
        .catch(function(err) {
          alert(err.responseText);
        });
        return false; // Stop event and propagation
      });
    });
    
    // Activate tooltips
    $(function () {
      $('[data-toggle="tooltip"]').tooltip()
    })
