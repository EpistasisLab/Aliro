extends ./layout.jade

block title
  title FGLab: Project #{project.name}

block content 
  h1 #[span.mega-octicon.octicon-circuit-board] Project: #{project.name} #[small.text-muted (#{project._id})]
  form#new-optimisation
    p #[strong Experiment Options] #[sup.help #[a(href="#optimisation-help") ?]]
    each val, key in project.schema
      if (val.type === "int" || val.type === "float")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2(for="#{key}") #{key}
          .col-sm-10(style="margin-bottom: 5px")
            input.form-control(type="text", value="#{val.default}", name="#{key}", id="#{key}", readonly)
          .col-sm-2.col-sm-offset-2
            input.form-control.form-control-success(type="number", value="#{val.default}", step="any", data-key="#{key}", data-opt="min", required)
            small.text-muted min (inclusive)
          .col-sm-2
            input.form-control.form-control-success(type="number", value="#{val.default}", step="any", data-key="#{key}", data-opt="max", required)
            small.text-muted max (non-inclusive)
          .col-sm-2
            input.form-control.form-control-success(type="number", value="1", data-key="#{key}", data-opt="num", required)
            small.text-muted # steps
          .col-sm-2
            select.form-control.c-select.form-control-success(data-key="#{key}", data-opt="scale")
              option(value="linear", selected) Linear
              option(value="log") Log
            small.text-muted scale
          .col-sm-2
            input.form-control.form-control-success(type="number", value="10", step="any", data-key="#{key}", data-opt="pow", required)
            small.text-muted base (log scale)
      else if (val.type === "bool")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2 #{key}
          .col-sm-10
            label.checkbox-inline #[input(type="checkbox", value="true", name="#{key}", data-type="#{val.type}", checked)] true
            label.checkbox-inline #[input(type="checkbox", value="false", name="#{key}", data-type="#{val.type}", checked)] false
      else if (val.type === "string")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2(for="#{key}") #{key}
          .col-sm-10
            input.form-control.form-control-success(type="text", value="#{val.default}", name="#{key}", id="#{key}", data-type="string", required)
            small.text-muted comma-delimited
      else if (val.type === "enum")
        .form-group.row.has-success(data-type="#{val.type}")
          label.form-control-label.control-label.col-sm-2 #{key}
          .col-sm-10
            each value in val.values
              label.checkbox-inline #[input(type="checkbox", value="#{value}", name="#{key}", data-type="#{val.type}", checked)] #{value}
    hr
    p #[strong Random / Grid Search Options]
    .form-group.row.has-success(data-type="_evaluations")
      label.form-control-label.control-label.col-sm-2(for="#{key}") # Evaluations
      .col-sm-10
        input.form-control.form-control-success(type="number", value="1", min="1", name="_evaluations", id="_evaluations", required)
        small.text-muted Number of evaluations for random search.
    .form-group.row.has-success(data-type="_retry")
      label.form-control-label.control-label.col-sm-2(for="#{key}") Retry Timeout
      .col-sm-10
        input.form-control.form-control-success(type="number", value="3600", min="1", name="_retry", id="_retry", required)
        small.text-muted Time (s) between retries after single failed experiment submission.
    .form-group.row
      .col-sm-2.col-sm-offset-2
        button#grid-search.btn.btn-primary(type="submit") Grid Search
      .col-sm-2
        button#random-search.btn.btn-primary(type="submit") Random Search
  hr#optimisation-help
  p.text-muted Numeric values can have a linear or log range specified by using the min (inclusive) and max (exclusive) modifiers; base is used for the log scale.
  p.text-muted Random search samples values uniformly from this range. # controls the number of steps, and determines the values sampled by grid search.
  p.text-muted String values can be separated by a comma. Enums and booleans must have at least one value selected.
  p.text-muted Random search samples values uniformly from these ranges. Grid search evaluates all values.

block scripts
  script(src="/bower_components/lodash/dist/lodash.min.js")
  script.
    // Parse from string instead prior to accessing internal objects via Jade
    var schema = !{JSON.stringify(project.schema)};

    $(function() {
      // Check numeric options
      $("[data-opt]").on("change", function() {
        // Elements
        var $el = $(this);
        var $formGroup = $el.closest(".form-group");
        var $min = $formGroup.find("[data-opt='min']");
        var $max = $formGroup.find("[data-opt='max']");
        var $num = $formGroup.find("[data-opt='num']");
        var $scale = $formGroup.find("[data-opt='scale']");
        var $pow = $formGroup.find("[data-opt='pow']");
        var $val = $formGroup.find("#" + $min.data("key"));

        $el.removeClass("form-control-success form-control-error");
        $formGroup.removeClass("has-success has-error");

        // Values
        var min = parseFloat($min.val());
        var max = parseFloat($max.val());
        var num = parseFloat($num.val());
        var scale = $scale.val();
        var pow = parseFloat($pow.val());
        var type = $formGroup.data("type");

        // Check validity
        if (num <= 0 || pow <= 0 || min > max || num % 1 !== 0) {
          $el.addClass("form-control-error");
          $formGroup.addClass("has-error");
          return;
        }

        // Loop through values
        var values = Array(num);
        var step = (max - min)/num;
        for (var s = 0; s < num; s++) {
          values[s] = min + s*step;
          if (scale === "log") {
            values[s] = Math.pow(pow, values[s]);
          } else if (type === "int") {
            values[s] = Math.round(values[s]);
          }
        }
        $val.val(values);

        $el.addClass("form-control-success");
        $formGroup.addClass("has-success");
      });

      // Check enum
      $("input[data-type='bool'], input[data-type='enum']").on("change", function() {
        var $el = $(this);
        var $formGroup = $el.closest(".form-group");
        // Get other options
        var $options = $formGroup.find(":checkbox");

        $el.removeClass("form-control-success form-control-error");
        $formGroup.removeClass("has-success has-error");
        // Check at least one option checked
        var numChecked = 0;
        for (var i = 0; i < $options.length; i++) {
          if ($($options[i]).prop("checked")) {
            numChecked++;
          }
        }
        if (numChecked === 0) {
          $el.addClass("form-control-error");
          $formGroup.addClass("has-error");
          return;
        }

        $el.addClass("form-control-success");
        $formGroup.addClass("has-success");
      });

      // Check string
      $("input[data-type='string']").on("change", function() {
        var $el = $(this);
        var $formGroup = $el.closest(".form-group");

        $el.removeClass("form-control-success form-control-error");
        $formGroup.removeClass("has-success has-error");
        if ($el.val().length === 0) {
          $el.addClass("form-control-error");
          $formGroup.addClass("has-error");
          return;
        }

        $el.addClass("form-control-success");
        $formGroup.addClass("has-success");
      });

      // Check optimiser options
      $("[name='_evaluations'], [name='_retry']").on("change", function() {
        var $el = $(this);
        var $formGroup = $el.closest(".form-group");

        $el.removeClass("form-control-success form-control-error");
        $formGroup.removeClass("has-success has-error");

        var val = parseFloat($el.val());
        if (isNaN(val) || val % 1 !== 0 || val <= 0) {
          $el.addClass("form-control-error");
          $formGroup.addClass("has-error");
          return;
        }

        $el.addClass("form-control-success");
        $formGroup.addClass("has-success");
      });

      var recurseGrid = function(obj) {
        if (_.keys(obj).length === 0) {
          return [];
        } else if (_.keys(obj).length === 1) {
          return obj[_.keys(obj)[0]];
        } else {
          var result = [];
          // Deep clone and get "tail" of object
          var clone = _.clone(obj);
          delete clone[_.keys(clone)[0]]
          var tail = recurseGrid(clone); // Recurse with tail
          for (var c in tail) {
            for (var i = 0; i < obj[_.keys(obj)[0]].length; i++) {
              var listObj = {};
              listObj[_.keys(obj)[0]] = obj[_.keys(obj)[0]][i];
              if (_.isObject(tail[c])) {
                _.assign(listObj, tail[c]);
              } else {
                listObj[_.keys(obj)[1]] = tail[c];
              }
              result.push(listObj);
            }
          }
          return result;
        }
      };

      // Prevent submission
      $("#new-optimisation").on("submit", function() {
        return false;
      });

      // Submits experiment
      $("#new-optimisation button").on("click", function() {
        var optimisationType = $(this).attr("id");
        
        // Process form
        var formObj = {};
        // Loop over form simply (does not work on nested data)
        $("#new-optimisation").find("[id]:input, :checkbox").not(":submit").each(function(ind, el) {
          var $el = $(el);
          var $formGroup = $el.closest(".form-group");
          var name = $el.attr("name");
          var val = $el.val();
          var type = $formGroup.data("type");

          var vals = [];
          // Get existing vals for enums
          if (formObj[name]) {
            vals = formObj[name];
          }
          // Get all elements
          val.split(",").forEach(function(a) {
            if (type === "int" || type === "float") {
              a = parseFloat(a);
            } else if (type === "bool") {
              a = (a === "true");
            }
            // Push checkbox if checked
            if (!((type === "bool" || type === "enum") && !$el.prop("checked"))) {
              vals.push(a);
            }
          });
          formObj[name] = vals; // Set key and value
        });

        // Extract retry timeout
        var retryTimeout = parseInt(formObj._retry[0]);
        delete formObj._retry;

        var expList;
        if (optimisationType === "random-search") {
          // Process range for random search
          var rangeObj = {};
          $(this).find("[data-opt]").each(function(ind, el) {
            var $el = $(el);
            var key = $el.data("key");
            var opt = $el.data("opt");
            var val = $el.val();
            if (opt !== "scale") {
              val = parseFloat(val);
            }
            // Create key if it doesn't exist 
            if (!rangeObj[key]) {
              rangeObj[key] = {};
            }
            rangeObj[key][opt] = val;
          });
          for (var prop in rangeObj) {
            rangeObj[prop].type = $("#" + prop).closest(".form-group").data("type");
          }

          // Extract evaluations for random search
          var evaluations = parseInt(formObj._evaluations[0]);
          delete formObj._evaluations;

          // Create experiment list
          expList = Array(evaluations);
          for (var i = 0; i < evaluations; i++) {
            var expObj = {};
            for (var prop in formObj) {
              if (rangeObj[prop]) {
                // Continuous uniform
                rObj = rangeObj[prop];
                var rand = Math.random()*(rObj.max - rObj.min) + rObj.min;
                if (rObj.scale === "log") {
                  rand = Math.pow(rObj.pow, rand);
                }
                if (rObj.type === "int") {
                  rand = Math.round(rand);
                }
                expObj[prop] = rand;
              } else {
                // Discrete uniform
                var list = formObj[prop];
                var ind = Math.floor(Math.random() * list.length);
                expObj[prop] = list[ind];
              }
            }
            expList[i] = expObj;
          }
        } else if (optimisationType === "grid-search") {
          // Delete evaluations
          delete formObj._evaluations;
          // Create experiment list
          expList = recurseGrid(formObj);
        }

        $.ajax({
          url: "/api/v1/projects/#{project._id}/batch?retry=" + retryTimeout,
          type: "POST",
          contentType: "application/json",
          data: JSON.stringify(expList)
        })
        .then(function(resp) {
          location.assign("/projects/#{project._id}/experiments"); // Move to experiments page
        })
        .catch(function(err) {
          alert(err.responseText);
        });
        return false; // Stop event and propagation
      });
    });
