extends ./layout.jade

block title
  title FGLab: Project #{project.name}

block styles
  link(href="/bower_components/bootstrap-table/dist/bootstrap-table.min.css", rel="stylesheet")
  //link(href="/bower_components/bootstrap-table/dist/extensions/sticky-header/bootstrap-table-sticky-header.css", rel="stylesheet")

block content 
  h1 #[span.mega-octicon.octicon-list-ordered] Project: #{project.name} #[small.text-muted (#{project._id})]
  table#experiments

block scripts
  script(src="/bower_components/tableExport.jquery.plugin/tableExport.min.js")
  script(src="/bower_components/bootstrap-table/dist/bootstrap-table.min.js")
  //script(src="/bower_components/bootstrap-table/dist/extensions/sticky-header/bootstrap-table-sticky-header.min.js")
  script(src="/bower_components/bootstrap-table/dist/extensions/multiple-sort/bootstrap-table-multiple-sort.js")
  script(src="/bower_components/bootstrap-table/dist/extensions/export/bootstrap-table-export.min.js")
  script(src="/bower_components/lodash/dist/lodash.min.js")
  script(src="/bower_components/moment/min/moment.min.js")
  script.
    // Flattens JSON objects
    JSON.flatten = function(data) {
      var result = {};
      function recurse (cur, prop) {
        if (Object(cur) !== cur) {
          result[prop] = cur;
        } else if (Array.isArray(cur)) {
          for(var i = 0, l = cur.length; i < l; i++) {
            recurse(cur[i], prop ? prop + "." + i : "" + i);
          }
          if (l == 0) {
            result[prop] = [];
          }
        } else {
          var isEmpty = true;
          for (var p in cur) {
            isEmpty = false;
            recurse(cur[p], prop ? prop + "." + p : p);
          }
          if (isEmpty) {
            result[prop] = {};
          }
        }
      }
      recurse(data, "");
      return result;
    }

    // Parse from string instead prior to accessing internal objects via Jade
    var schema = !{JSON.stringify(project.schema)};
    var experiments = !{JSON.stringify(experiments)};

    // Create columns from options
    var columns = [
      {field: "_id", title: "", formatter: function(val) {return "<button data-id='" + val + "' class='btn btn-danger-outline btn-sm delete'><span class='octicon octicon-trashcan'></span></button>";}},
      {field: "_id", title: "ID", sortable: "true", formatter: function(val) {return "<a href='/experiments/" + val + "'>" + val + "</a>";}},
      {field: "_status", title: "Status", sortable: "true", formatter: function(val) {
        // Colour-code status
        var iconClass;
        if (val === "success") {
          iconClass = "octicon octicon-check text-success";
        } else if (val === "fail") {
          iconClass = "octicon octicon-circle-slash text-danger";
        } else if (val == "running") {
          iconClass = "octicon octicon-clock text-info";
        }
        return "<span class='" + iconClass + "'></span>";
      }},
    ];
    // Loop over scores
    var scoreProps = {};
    for (var i = 0; i < experiments.length; i++) {
      // Extend properties
      _.assign(scoreProps, experiments[i]._scores);
    }
    for (var prop in scoreProps) {
      columns.push({field: "_scores." + prop, title: prop, sortable: true});
    }
    // Utilises 2 functions to solve loop scope problem
    for (var key in schema) {
      columns.push({field: "_options." + key, title: key, sortable: true, formatter: function(k) {return function(val) {
        var textClass = "";
        // Mute default options
        if (val === schema[k].default) {
          textClass = "text-muted";
        }
        return "<span class='" + textClass + "'>" + val + "</span>";
      }}(key)});
    }
    columns.push({field: "_started", title: "Started", sortable: "true", formatter: function(val) {return val ? moment().format(val) : "";}});
    columns.push({field: "_finished", title: "Finished", sortable: "true", formatter: function(val) {return val ? moment().format(val) : "";}});
    columns.push({field: "_notes", title: "Notes"});
    // TODO Loop over custom properties

    // Flatten each experiment
    for (var i = 0; i < experiments.length; i++) {
      experiments[i] = JSON.flatten(experiments[i]);
    }

    $(function() {
      // Initialise experiment table
      $("#experiments").bootstrapTable({
        classes: "table",
        undefinedText: "",
        striped: true,
        sortName: "_started",
        sortOrder: "desc",
        iconsPrefix: "octicon",
        search: true,
        columns: columns,
        showColumns: true,
        data: experiments,
        //stickyHeader: true,
        showMultiSort: true,
        showExport: true,
        exportOptions: {
          fileName: "experiments",
          ignoreColumn: [0, 2]
        },
        icons: {
          sort: "octicon-list-ordered",
          plus: "octicon-plus",
          minus: "octicon-dash",
          export: "octicon-desktop-download"
        }
      });

      // Delete experiment
      $("button.delete").on("click", function() {
        var id = $(this).data("id");
        // Delete files linked to by experiment
        $.ajax({
          url: "/api/v1/experiments/" + id + "/files",
          type: "DELETE"
        })
        .then(function() {
          // Then delete experiment itself
          $.ajax({
            url: "/api/v1/experiments/" + id,
            type: "DELETE"
          })
          .then(function() {
            location.reload(); // Refresh page
          })
          .catch(function(err) {
            console.log(err);
          });
        })
        .catch(function(err) {
          console.log(err);
        });
        return false; // Stop event and propagation
      });
    });
