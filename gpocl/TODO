- Implement "Genetic Operations Hiding" and evaluate its performance. Hiding
  genetic operations means that after each newly created program an OpenCL
  kernel is launched (non-blocking / asynchronously) to interpret/evaluate this
  program.

- Since we can obtain 100x speed-up over a high-end CPU when evaluating the
  population, why not use the CPU to do in parallel the genetic operations?

- Implement custom "search relationship". This is fairly easy to achieve under
  the OpenCL: we can take advantage of the fact of the kernel being compiled
  on-the-fly, so what we need to do is to pass the user-given formula directly
  to the OpenCL compiler.

- Implement the option to choose the type of error: sum (current), max, and so
  on.

- Integer ephemeral constants

- Negative ephemeral constants

- Check if the 'bit shifting' operations are imposing some considerable overhead.

- Check the use of the flag CL_DEVICE_TYPE_DEFAULT ("use the GPU device if
  possible, otherwise revert to the CPU") when no device is explicitly given.
